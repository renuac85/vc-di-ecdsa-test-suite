{
  "matrices": [
    {
      "title": "Data Integrity (ecdsa-rdfc-2019 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:b5471181-62ce-4a0f-8d71-e5c5bcbc9707",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:16e83ada-1082-4acc-94d8-abcbf94baee8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:9f3924ec-3833-40d2-890d-94fe55de354d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:e326418c-0d7e-45b4-bc5e-3cb102805f30",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:136:32)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:db1870ec-38a2-4b2e-83bd-fbb670f885f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { …(5) } to have property 'cryptosuite'",
                "showDiff": false,
                "actual": {
                  "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                  "type": "Ed25519Signature2020",
                  "proofPurpose": "assertionMethod",
                  "created": "2024-03-03T05:05:22Z",
                  "proofValue": "z35P9aUiTBrJ358zZtuDm27g7H6kezcGDirfkwXbDcFHtoqZQ5xFaRtRj3k1xyip3TAVkB2KLm13nA6R6iyTGPGkC"
                },
                "stack": "AssertionError: expected { …(5) } to have property 'cryptosuite'\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:162:31)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:7aec2c35-3029-4620-b5eb-9a293f304e59",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:61516331-d7d6-4886-8a75-5fd66e99c302",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:e44ad92b-c39b-48b3-b215-af65cae5408a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:cc1309e1-8c30-46af-9b20-8ab4dc3c88d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:c95f3c75-b03f-4250-b9a5-0000a88070b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:ea53d92a-d3ff-46b5-8418-d9b3da696681",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:5f6c810e-9c42-4442-b90b-e1ecd741b722",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:6a9ccb31-d05f-4302-8585-21ef489355cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:77b1c2d7-b3b1-4e2c-8758-fce4afa22766",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:f43be620-80bd-4a57-a4b9-729d42e85c9c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 585,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 392,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i6JnOTdvxjdj2vOJqL6MM",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:758bf008-3184-4978-b284-c5ea0e8bfa2a"
        },
        {
          "title": "apicatalog.com: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:d03e5fa1-bb1a-4b16-a533-e58a2cf991b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:e257759a-32d0-4a2b-9fbe-2d400283f5b3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:9e43d8c0-a748-43cd-afbb-141b3b86dbb3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:20fa9402-43c8-4734-8603-78155ef54532",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:136:32)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:6c36584b-3dcd-4215-bc30-8406f4bec5a5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { …(5) } to have property 'cryptosuite'",
                "showDiff": false,
                "actual": {
                  "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                  "type": "Ed25519Signature2020",
                  "proofPurpose": "assertionMethod",
                  "created": "2024-03-03T05:05:22Z",
                  "proofValue": "z4nZ9vpizAu6wUVFmWz7tt1remzVwz3YKKZaGBuxe52rs5MmzR8vmzqH63Cn5jdyT7xrULTvS5YEK7nC1ppkEjQZL"
                },
                "stack": "AssertionError: expected { …(5) } to have property 'cryptosuite'\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:162:31)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:b0c0b8bd-d66f-4560-bd3f-329e6475c353",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:a2a42e23-5a25-4ab1-869a-035882e710d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:492da1fa-6ca5-4e68-936b-20806e72c23a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:e92777a1-2e78-4af4-8b42-79baa2b42492",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:d036c414-b591-4d49-8e19-2b5fde6b1617",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:ea4caad5-caee-4941-a160-a1e9da36875d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:0a083ce0-2a94-478d-aae6-25cdb43f60f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:f8334a38-58df-4649-82b2-2cfe693adaf8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:997d0f9c-e08f-4447-9768-4eb9e037d849",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:9c46c29a-8086-49da-9302-0628e55ec797",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-384\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 988,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 183,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i6JnOTdvxjdj2vOJqL6MM",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:a972813a-e111-405d-9c2f-d246eb3ed820"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:48a29943-b02d-41b5-ac8e-f473bdf73b31",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:62eab5d9-bb03-4970-833e-e3026a7f68c8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:dd25d2d0-874c-44e2-bf0c-efa1cc9fa0c1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:b52f4b14-601e-485c-8942-24b967f01d3a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:319a2546-2d14-497c-8d81-aac50130d519",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:51657d9c-2860-46c4-8b03-da59f9cd33fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:24a256f8-7dd4-477f-aa4c-68ead1207d12",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:0082f65d-5006-49b2-8e31-cc75f0d5765c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:1d6bf7e9-5cc8-41f2-8f17-17796e21bb0b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:c248f993-a6f9-4e86-9b7b-48f3557de66c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:30394c8e-dd36-4833-8b6d-7ee7178d0398",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:2b88c69d-5f30-4e3a-928b-d56ea23dcfc4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:9295911d-d3b8-4ed1-925f-eaeb5b4c9c1c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:bed38845-2d5a-4bc7-8d56-c857e77db0a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:f07f3298-9032-40df-bbdf-41f0146d863e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1176,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 604,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i6JnOTdvxjdj2vOJqL6MM",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:1248ca16-ea58-4f14-82ff-7418399f8484"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:54550c5b-d12a-4813-8b55-8889d1dcb482",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:d3bd7fc1-3ded-4ad4-96a8-1e2e18e68f08",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:4de7857b-0492-4e9e-9289-38b9e68e6c20",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:f85cd659-20fe-4039-b3d6-206409b4a7fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:ab172064-df30-401d-9863-3de84f30ca0d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:98ad5bc7-68a3-4abf-9b9e-f0fcd145fc84",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:d46eba37-a927-4d86-b658-a6493976712d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:af6a2348-34b4-4e1c-8003-ebb3e246ad46",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:e01fb160-6909-432f-922e-c2032ba6a8d5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:72b178b8-084e-4aa7-8679-fdd506a89d3c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:4737a315-70a8-420d-af82-14aac99e276a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:952b9ca8-8436-4697-8dae-ac5567d260c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:de74b360-9d68-432f-b906-7b3a2d17dc90",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:1456cf6e-d440-46e8-a9e5-37e480f47945",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:9bf64bba-0a40-40a0-90de-22d950524207",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-384\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i6JnOTdvxjdj2vOJqL6MM",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:0859733f-30c0-4c95-abab-5e88a9e27459"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:11055f5d-580c-4242-9580-1bb749e83c65",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:513ffd78-c6fe-4b59-b23c-ecbe627b6df7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:b2329b5c-72db-4fbe-8374-86e37f6a6f7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:6e5c1f2d-144f-497e-8622-45eeb91d5994",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:145:38)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:dc5dd16f-a8ed-470d-9c05-3143a440c51d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:3d419c86-60e9-4a3e-99d8-2eeadb4b3308",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:93b5a972-115d-4140-8806-1941c56c9793",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:5b9f2221-1c58-4120-82e0-fe1f0685e671",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:d9eef62f-9f0b-4047-b4d8-2460f3962c23",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:f68bc7d2-bfd3-426c-832d-f39963eb838f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:c092548f-0ede-4742-8bf6-0e7b949f9a7e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:fafa7625-bcf0-4baa-861d-0c46914db255",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:5d3e4f83-c332-4a64-8c3f-8b0f65ded94c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:ac590d75-1e35-40f6-a817-75abd3c262e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:81e320ac-36fe-4f42-91ff-eeb1b0799e7a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1928,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 322,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i6JnOTdvxjdj2vOJqL6MM",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:b0ca6f14-9227-4b3d-8de9-ab6ca6ed6074"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:be743568-dfb6-4557-8fda-fd09da07ca08",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:9220ae5e-d4e2-4e87-9e8f-fb8864d4ab63",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:71467c8c-2644-4dc8-b592-869bde435aa6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:c7d583d2-2805-4475-8f01-812d4b4d2249",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:a2f8c6fd-bd7a-4a66-a933-581e225ede55",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:e43d77be-6670-46b8-976d-ccf35b0b0462",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:b16b57d3-d39d-4d1e-8f84-00ed35d86064",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:3abbfbab-80c4-4686-a096-ee2893e75eac",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:30fbe9d9-14e0-48c3-825f-95fa71ec0c33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:ea0da6df-2033-41ec-a743-0e4863a40275",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:6c95a62d-acbc-4116-a2ca-3033c9070b2d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:44a8b96e-e3c3-4c0c-8230-31fca7d9966c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:e481326a-03b4-4f11-9106-3d1a875eeb21",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:8419cbaa-e48e-49ad-99d2-442d4456e819",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:effc760e-57ad-4cc1-9ec6-eead6dcd07af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2253,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 867,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "i6JnOTdvxjdj2vOJqL6MM",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:77437912-8325-4141-9f46-a7466220335b"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lvjmgZGODL3QiWlcH48Cg",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:bb832f63-0a9f-4acc-a8ec-bcb2e85fa7a5",
      "columns": [
        "apicatalog.com: P-256",
        "apicatalog.com: P-384",
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:b5471181-62ce-4a0f-8d71-e5c5bcbc9707",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:d03e5fa1-bb1a-4b16-a533-e58a2cf991b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:48a29943-b02d-41b5-ac8e-f473bdf73b31",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:54550c5b-d12a-4813-8b55-8889d1dcb482",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:11055f5d-580c-4242-9580-1bb749e83c65",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:be743568-dfb6-4557-8fda-fd09da07ca08",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.id\" field exists, it MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:16e83ada-1082-4acc-94d8-abcbf94baee8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:e257759a-32d0-4a2b-9fbe-2d400283f5b3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:62eab5d9-bb03-4970-833e-e3026a7f68c8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:d3bd7fc1-3ded-4ad4-96a8-1e2e18e68f08",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:513ffd78-c6fe-4b59-b23c-ecbe627b6df7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:9220ae5e-d4e2-4e87-9e8f-fb8864d4ab63",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:9f3924ec-3833-40d2-890d-94fe55de354d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:9e43d8c0-a748-43cd-afbb-141b3b86dbb3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:dd25d2d0-874c-44e2-bf0c-efa1cc9fa0c1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:4de7857b-0492-4e9e-9289-38b9e68e6c20",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:b2329b5c-72db-4fbe-8374-86e37f6a6f7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:71467c8c-2644-4dc8-b592-869bde435aa6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:e326418c-0d7e-45b4-bc5e-3cb102805f30",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:136:32)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:20fa9402-43c8-4734-8603-78155ef54532",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:136:32)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:b52f4b14-601e-485c-8942-24b967f01d3a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:f85cd659-20fe-4039-b3d6-206409b4a7fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:6e5c1f2d-144f-497e-8622-45eeb91d5994",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:145:38)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:c7d583d2-2805-4475-8f01-812d4b4d2249",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.cryptosuite\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:db1870ec-38a2-4b2e-83bd-fbb670f885f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { …(5) } to have property 'cryptosuite'",
                "showDiff": false,
                "actual": {
                  "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                  "type": "Ed25519Signature2020",
                  "proofPurpose": "assertionMethod",
                  "created": "2024-03-03T05:05:22Z",
                  "proofValue": "z35P9aUiTBrJ358zZtuDm27g7H6kezcGDirfkwXbDcFHtoqZQ5xFaRtRj3k1xyip3TAVkB2KLm13nA6R6iyTGPGkC"
                },
                "stack": "AssertionError: expected { …(5) } to have property 'cryptosuite'\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:162:31)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:6c36584b-3dcd-4215-bc30-8406f4bec5a5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected { …(5) } to have property 'cryptosuite'",
                "showDiff": false,
                "actual": {
                  "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                  "type": "Ed25519Signature2020",
                  "proofPurpose": "assertionMethod",
                  "created": "2024-03-03T05:05:22Z",
                  "proofValue": "z4nZ9vpizAu6wUVFmWz7tt1remzVwz3YKKZaGBuxe52rs5MmzR8vmzqH63Cn5jdyT7xrULTvS5YEK7nC1ppkEjQZL"
                },
                "stack": "AssertionError: expected { …(5) } to have property 'cryptosuite'\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:162:31)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:319a2546-2d14-497c-8d81-aac50130d519",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:ab172064-df30-401d-9863-3de84f30ca0d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:dc5dd16f-a8ed-470d-9c05-3143a440c51d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:a2f8c6fd-bd7a-4a66-a933-581e225ede55",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:7aec2c35-3029-4620-b5eb-9a293f304e59",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:b0c0b8bd-d66f-4560-bd3f-329e6475c353",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:51657d9c-2860-46c4-8b03-da59f9cd33fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:98ad5bc7-68a3-4abf-9b9e-f0fcd145fc84",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:3d419c86-60e9-4a3e-99d8-2eeadb4b3308",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:e43d77be-6670-46b8-976d-ccf35b0b0462",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:61516331-d7d6-4886-8a75-5fd66e99c302",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:a2a42e23-5a25-4ab1-869a-035882e710d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:24a256f8-7dd4-477f-aa4c-68ead1207d12",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:d46eba37-a927-4d86-b658-a6493976712d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:93b5a972-115d-4140-8806-1941c56c9793",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:b16b57d3-d39d-4d1e-8f84-00ed35d86064",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:e44ad92b-c39b-48b3-b215-af65cae5408a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:492da1fa-6ca5-4e68-936b-20806e72c23a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:0082f65d-5006-49b2-8e31-cc75f0d5765c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:af6a2348-34b4-4e1c-8003-ebb3e246ad46",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:5b9f2221-1c58-4120-82e0-fe1f0685e671",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:3abbfbab-80c4-4686-a096-ee2893e75eac",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofPurpose\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:cc1309e1-8c30-46af-9b20-8ab4dc3c88d1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:e92777a1-2e78-4af4-8b42-79baa2b42492",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:1d6bf7e9-5cc8-41f2-8f17-17796e21bb0b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:e01fb160-6909-432f-922e-c2032ba6a8d5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:d9eef62f-9f0b-4047-b4d8-2460f3962c23",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:30fbe9d9-14e0-48c3-825f-95fa71ec0c33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofValue\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:c95f3c75-b03f-4250-b9a5-0000a88070b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:d036c414-b591-4d49-8e19-2b5fde6b1617",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:c248f993-a6f9-4e86-9b7b-48f3557de66c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:72b178b8-084e-4aa7-8679-fdd506a89d3c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:f68bc7d2-bfd3-426c-832d-f39963eb838f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:ea0da6df-2033-41ec-a743-0e4863a40275",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:ea53d92a-d3ff-46b5-8418-d9b3da696681",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:ea4caad5-caee-4941-a160-a1e9da36875d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:30394c8e-dd36-4833-8b6d-7ee7178d0398",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:4737a315-70a8-420d-af82-14aac99e276a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:c092548f-0ede-4742-8bf6-0e7b949f9a7e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:6c95a62d-acbc-4116-a2ca-3033c9070b2d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:5f6c810e-9c42-4442-b90b-e1ecd741b722",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:0a083ce0-2a94-478d-aae6-25cdb43f60f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:2b88c69d-5f30-4e3a-928b-d56ea23dcfc4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:952b9ca8-8436-4697-8dae-ac5567d260c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:fafa7625-bcf0-4baa-861d-0c46914db255",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:44a8b96e-e3c3-4c0c-8230-31fca7d9966c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.challenge\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:6a9ccb31-d05f-4302-8585-21ef489355cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:f8334a38-58df-4649-82b2-2cfe693adaf8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:9295911d-d3b8-4ed1-925f-eaeb5b4c9c1c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:de74b360-9d68-432f-b906-7b3a2d17dc90",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:5d3e4f83-c332-4a64-8c3f-8b0f65ded94c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:e481326a-03b4-4f11-9106-3d1a875eeb21",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:77b1c2d7-b3b1-4e2c-8758-fce4afa22766",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:997d0f9c-e08f-4447-9768-4eb9e037d849",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:bed38845-2d5a-4bc7-8d56-c857e77db0a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:1456cf6e-d440-46e8-a9e5-37e480f47945",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:ac590d75-1e35-40f6-a817-75abd3c262e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:8419cbaa-e48e-49ad-99d2-442d4456e819",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "TlWo8VTrjvB207GR45VKi",
              "ctx": null,
              "_testId": "urn:uuid:f43be620-80bd-4a57-a4b9-729d42e85c9c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Vx_P6bLxza93DrZO8pWfV",
              "ctx": null,
              "_testId": "urn:uuid:9c46c29a-8086-49da-9302-0628e55ec797",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "vZI8Txu1PJ0dgFcMu94zx",
              "ctx": null,
              "_testId": "urn:uuid:f07f3298-9032-40df-bbdf-41f0146d863e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "W9X2sDzsFXdEialmunpDH",
              "ctx": null,
              "_testId": "urn:uuid:9bf64bba-0a40-40a0-90de-22d950524207",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "pZp5zkMHJsiW7fVAWzovE",
              "ctx": null,
              "_testId": "urn:uuid:81e320ac-36fe-4f42-91ff-eeb1b0799e7a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "4uiICRKx5LXCDtIHBhuWa",
              "ctx": null,
              "_testId": "urn:uuid:effc760e-57ad-4cc1-9ec6-eead6dcd07af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Hs9DskK92Kq2Xp5edD0Bh",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Hs9DskK92Kq2Xp5edD0Bh",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Hs9DskK92Kq2Xp5edD0Bh",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Hs9DskK92Kq2Xp5edD0Bh",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Hs9DskK92Kq2Xp5edD0Bh",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".\"",
              "body": "async function() {\n              issuedVc = await createInitialVc({\n                issuer,\n                vc: credentials.create.document\n              });\n              // VCs can have multiple proofs so account for that\n              proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                [issuedVc?.proof];\n              const verificationMethods = proofs.map(\n                proof => proof.verificationMethod);\n              for(const verificationMethod of verificationMethods) {\n                const verificationMethodDocument = await documentLoader({\n                  url: verificationMethod\n                });\n                verificationMethodDocuments.push(verificationMethodDocument);\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Hs9DskK92Kq2Xp5edD0Bh",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3123,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "_error": null,
              "state": "failed",
              "err": {}
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "pH1j8dOFd91yOjuwmtoiC",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:bd27978f-03ca-436e-b56e-c376407cf680"
        },
        {
          "title": "apicatalog.com: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "ok7I7d3KEETx1GMg33NJm",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "ok7I7d3KEETx1GMg33NJm",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "ok7I7d3KEETx1GMg33NJm",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "ok7I7d3KEETx1GMg33NJm",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "ok7I7d3KEETx1GMg33NJm",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".\"",
              "body": "async function() {\n              issuedVc = await createInitialVc({\n                issuer,\n                vc: credentials.create.document\n              });\n              // VCs can have multiple proofs so account for that\n              proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                [issuedVc?.proof];\n              const verificationMethods = proofs.map(\n                proof => proof.verificationMethod);\n              for(const verificationMethod of verificationMethods) {\n                const verificationMethodDocument = await documentLoader({\n                  url: verificationMethod\n                });\n                verificationMethodDocuments.push(verificationMethodDocument);\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ok7I7d3KEETx1GMg33NJm",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3269,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 196,
              "_error": null,
              "state": "failed",
              "err": {}
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "pH1j8dOFd91yOjuwmtoiC",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:bc9cf1d5-a11b-4d28-bfb2-2ed367bdb8b5"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G0cSZqzJfLXjDWjO85fiA",
              "ctx": null,
              "_testId": "urn:uuid:a4c81d98-20b0-4ed6-b359-479509cd4288",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G0cSZqzJfLXjDWjO85fiA",
              "ctx": null,
              "_testId": "urn:uuid:d61e6381-f530-43f2-b329-3771ed764293",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G0cSZqzJfLXjDWjO85fiA",
              "ctx": null,
              "_testId": "urn:uuid:23e27872-3cf2-4318-a784-12424182fd6a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3608,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G0cSZqzJfLXjDWjO85fiA",
              "ctx": null,
              "_testId": "urn:uuid:382f4e33-aaed-4554-999b-70421641a8e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3609,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G0cSZqzJfLXjDWjO85fiA",
              "ctx": null,
              "_testId": "urn:uuid:fb224bd0-014c-49ec-9c89-95b92b63a292",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3610,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n              issuedVc = await createInitialVc({\n                issuer,\n                vc: credentials.create.document\n              });\n              // VCs can have multiple proofs so account for that\n              proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                [issuedVc?.proof];\n              const verificationMethods = proofs.map(\n                proof => proof.verificationMethod);\n              for(const verificationMethod of verificationMethods) {\n                const verificationMethodDocument = await documentLoader({\n                  url: verificationMethod\n                });\n                verificationMethodDocuments.push(verificationMethodDocument);\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "G0cSZqzJfLXjDWjO85fiA",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3465,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 141,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "pH1j8dOFd91yOjuwmtoiC",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:6afe018f-8a35-48cb-bd12-fa4aa85cf979"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "57Xsg46psvgBKJYiHs-Q5",
              "ctx": null,
              "_testId": "urn:uuid:b8ac37cb-9373-4a8f-bd6c-4da02dbf4b7f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "57Xsg46psvgBKJYiHs-Q5",
              "ctx": null,
              "_testId": "urn:uuid:b419b7c9-1e3c-4fa5-b69a-b240120ace4c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4009,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "57Xsg46psvgBKJYiHs-Q5",
              "ctx": null,
              "_testId": "urn:uuid:09b49655-6c0a-4e51-aadb-cd45dbe5e756",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "57Xsg46psvgBKJYiHs-Q5",
              "ctx": null,
              "_testId": "urn:uuid:e3754d49-d48b-4096-abf6-b6f77761e837",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "57Xsg46psvgBKJYiHs-Q5",
              "ctx": null,
              "_testId": "urn:uuid:d71a566d-c31e-4511-bf8e-5f3de8fe381f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4011,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-384\"",
              "body": "async function() {\n              issuedVc = await createInitialVc({\n                issuer,\n                vc: credentials.create.document\n              });\n              // VCs can have multiple proofs so account for that\n              proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                [issuedVc?.proof];\n              const verificationMethods = proofs.map(\n                proof => proof.verificationMethod);\n              for(const verificationMethod of verificationMethods) {\n                const verificationMethodDocument = await documentLoader({\n                  url: verificationMethod\n                });\n                verificationMethodDocuments.push(verificationMethodDocument);\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "57Xsg46psvgBKJYiHs-Q5",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3610,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 398,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "pH1j8dOFd91yOjuwmtoiC",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:1994456b-890b-4958-aca2-3c991704cfc1"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "15MekHpfZavFuV2LFZb6k",
              "ctx": null,
              "_testId": "urn:uuid:1f33cec1-c98a-4d9c-8815-c201c28bdc43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "stack": "AssertionError: Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:70:24)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "15MekHpfZavFuV2LFZb6k",
              "ctx": null,
              "_testId": "urn:uuid:f1373ba6-0927-493e-9cb1-c47ee73adfb9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4119,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "15MekHpfZavFuV2LFZb6k",
              "ctx": null,
              "_testId": "urn:uuid:23b89639-fd4e-470a-80e6-ece9dbd19222",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4120,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "15MekHpfZavFuV2LFZb6k",
              "ctx": null,
              "_testId": "urn:uuid:651cac69-afc6-4ab5-99d1-55d8420c9ca1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4121,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "15MekHpfZavFuV2LFZb6k",
              "ctx": null,
              "_testId": "urn:uuid:4a302197-4203-48c2-afad-2c37b0a6b41e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4121,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID: P-256\"",
              "body": "async function() {\n              issuedVc = await createInitialVc({\n                issuer,\n                vc: credentials.create.document\n              });\n              // VCs can have multiple proofs so account for that\n              proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                [issuedVc?.proof];\n              const verificationMethods = proofs.map(\n                proof => proof.verificationMethod);\n              for(const verificationMethod of verificationMethods) {\n                const verificationMethodDocument = await documentLoader({\n                  url: verificationMethod\n                });\n                verificationMethodDocuments.push(verificationMethodDocument);\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "15MekHpfZavFuV2LFZb6k",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4011,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "pH1j8dOFd91yOjuwmtoiC",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:1d22ba03-2236-4c0b-8f9b-e0d680f4a3bd"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "TcSpvhC9hk4OnOeoQlLo9",
              "ctx": null,
              "_testId": "urn:uuid:0947fc26-8efb-4805-b6f9-cb7be5e66a59",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "TcSpvhC9hk4OnOeoQlLo9",
              "ctx": null,
              "_testId": "urn:uuid:5b593642-2a09-457e-a085-e97b5c5ab44a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4295,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "TcSpvhC9hk4OnOeoQlLo9",
              "ctx": null,
              "_testId": "urn:uuid:b3c6e0c7-b955-45bd-b65a-540ed0320529",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4296,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "TcSpvhC9hk4OnOeoQlLo9",
              "ctx": null,
              "_testId": "urn:uuid:828e7cd0-0424-4a22-a313-161ebd239101",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4297,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "TcSpvhC9hk4OnOeoQlLo9",
              "ctx": null,
              "_testId": "urn:uuid:fcb98aab-3bef-4ed1-b12f-8e8c932c3d9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4297,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine: P-256\"",
              "body": "async function() {\n              issuedVc = await createInitialVc({\n                issuer,\n                vc: credentials.create.document\n              });\n              // VCs can have multiple proofs so account for that\n              proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                [issuedVc?.proof];\n              const verificationMethods = proofs.map(\n                proof => proof.verificationMethod);\n              for(const verificationMethod of verificationMethods) {\n                const verificationMethodDocument = await documentLoader({\n                  url: verificationMethod\n                });\n                verificationMethodDocuments.push(verificationMethodDocument);\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "TcSpvhC9hk4OnOeoQlLo9",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4121,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 174,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "pH1j8dOFd91yOjuwmtoiC",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:7d4ffcf0-5acb-48f3-89ff-1e4628532963"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "cBsMgOMRRkRi8QapgUJ2A",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:2ca86419-4665-453e-92b0-55f51f5cad00",
      "columns": [
        "apicatalog.com: P-256",
        "apicatalog.com: P-384",
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
          "cells": [
            {
              "cell": {
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
                "colId": "apicatalog.com: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "cell": {
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
                "colId": "apicatalog.com: P-384"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G0cSZqzJfLXjDWjO85fiA",
              "ctx": null,
              "_testId": "urn:uuid:a4c81d98-20b0-4ed6-b359-479509cd4288",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "57Xsg46psvgBKJYiHs-Q5",
              "ctx": null,
              "_testId": "urn:uuid:b8ac37cb-9373-4a8f-bd6c-4da02dbf4b7f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "15MekHpfZavFuV2LFZb6k",
              "ctx": null,
              "_testId": "urn:uuid:1f33cec1-c98a-4d9c-8815-c201c28bdc43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "stack": "AssertionError: Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:70:24)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "TcSpvhC9hk4OnOeoQlLo9",
              "ctx": null,
              "_testId": "urn:uuid:0947fc26-8efb-4805-b6f9-cb7be5e66a59",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "cell": {
                "rowId": "The \"proof\" MUST verify when using a conformant verifier.",
                "colId": "apicatalog.com: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "cell": {
                "rowId": "The \"proof\" MUST verify when using a conformant verifier.",
                "colId": "apicatalog.com: P-384"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G0cSZqzJfLXjDWjO85fiA",
              "ctx": null,
              "_testId": "urn:uuid:d61e6381-f530-43f2-b329-3771ed764293",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "57Xsg46psvgBKJYiHs-Q5",
              "ctx": null,
              "_testId": "urn:uuid:b419b7c9-1e3c-4fa5-b69a-b240120ace4c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4009,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "15MekHpfZavFuV2LFZb6k",
              "ctx": null,
              "_testId": "urn:uuid:f1373ba6-0927-493e-9cb1-c47ee73adfb9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4119,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "TcSpvhC9hk4OnOeoQlLo9",
              "ctx": null,
              "_testId": "urn:uuid:5b593642-2a09-457e-a085-e97b5c5ab44a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4295,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "cell": {
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
                "colId": "apicatalog.com: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "cell": {
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
                "colId": "apicatalog.com: P-384"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G0cSZqzJfLXjDWjO85fiA",
              "ctx": null,
              "_testId": "urn:uuid:23e27872-3cf2-4318-a784-12424182fd6a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3608,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "57Xsg46psvgBKJYiHs-Q5",
              "ctx": null,
              "_testId": "urn:uuid:09b49655-6c0a-4e51-aadb-cd45dbe5e756",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "15MekHpfZavFuV2LFZb6k",
              "ctx": null,
              "_testId": "urn:uuid:23b89639-fd4e-470a-80e6-ece9dbd19222",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4120,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "TcSpvhC9hk4OnOeoQlLo9",
              "ctx": null,
              "_testId": "urn:uuid:b3c6e0c7-b955-45bd-b65a-540ed0320529",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4296,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "cell": {
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
                "colId": "apicatalog.com: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "cell": {
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
                "colId": "apicatalog.com: P-384"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G0cSZqzJfLXjDWjO85fiA",
              "ctx": null,
              "_testId": "urn:uuid:382f4e33-aaed-4554-999b-70421641a8e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3609,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "57Xsg46psvgBKJYiHs-Q5",
              "ctx": null,
              "_testId": "urn:uuid:e3754d49-d48b-4096-abf6-b6f77761e837",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "15MekHpfZavFuV2LFZb6k",
              "ctx": null,
              "_testId": "urn:uuid:651cac69-afc6-4ab5-99d1-55d8420c9ca1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4121,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "TcSpvhC9hk4OnOeoQlLo9",
              "ctx": null,
              "_testId": "urn:uuid:828e7cd0-0424-4a22-a313-161ebd239101",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4297,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
          "cells": [
            {
              "cell": {
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
                "colId": "apicatalog.com: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "cell": {
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
                "colId": "apicatalog.com: P-384"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "G0cSZqzJfLXjDWjO85fiA",
              "ctx": null,
              "_testId": "urn:uuid:fb224bd0-014c-49ec-9c89-95b92b63a292",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3610,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "57Xsg46psvgBKJYiHs-Q5",
              "ctx": null,
              "_testId": "urn:uuid:d71a566d-c31e-4511-bf8e-5f3de8fe381f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4011,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "15MekHpfZavFuV2LFZb6k",
              "ctx": null,
              "_testId": "urn:uuid:4a302197-4203-48c2-afad-2c37b0a6b41e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4121,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "TcSpvhC9hk4OnOeoQlLo9",
              "ctx": null,
              "_testId": "urn:uuid:fcb98aab-3bef-4ed1-b12f-8e8c932c3d9d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4297,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (ecdsa-rdfc-2019 verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:625f26ac-84c4-47f6-af0a-d3614792080e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4341,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:571d9112-25b0-43ad-a0b1-1086a04da9d0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4412,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 74,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:3a6aa5ca-2a09-40ce-800e-4cc091641380",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4486,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:cb9be192-d44c-4049-87fc-5b34e146fc20",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4570,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:35cf6f7c-4f08-4711-b910-789e9ed29a00",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4664,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:7cd8e2fc-88ae-481d-a545-64ada3dab5d3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4770,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:71894283-0ea7-443f-b697-2f08b6140dc1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4871,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:6584cff0-3df2-4a4e-b35e-0fc51776c1b6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4969,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:fcffcede-16dd-4c95-bca5-fb67ce56ec7a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5072,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:65aaf45e-ce9a-4521-868b-a360f4fc8ae6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5169,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:68e636fa-c006-43dc-9699-3c6006b0d8b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5271,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:f12292bf-c605-422a-8ba0-61fa869e8c27",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5369,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:2e628005-c858-47d3-b507-8ec225cbb1bf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5477,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:ce8d491f-ab4d-4327-985c-1fdb79b44de0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5570,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:805449a9-12f4-474e-a73d-15b874f194fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4299,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "stt1ETuuFPP0J5dkZbwNk",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:baa9c988-9bfb-4bab-8690-7265d252826f"
        },
        {
          "title": "Digital Bazaar: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:665bc23d-79b6-4aaa-91e5-b1a8b9d21778",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5770,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 315,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:0fb25e50-88b2-46f5-93be-308f55ba11f2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6085,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:5a4cd1cc-275d-403f-bd28-6325568d51b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6182,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:1b4a0231-556c-4f81-b262-31f57ce34eb1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6278,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:1a5d3851-3d5c-407f-b01d-8afa19a7079f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6372,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:f95fc475-cf99-460b-b613-1cc6ccb50784",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6471,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:d856857b-9e52-4705-bdf1-8fd46095a980",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6577,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:43935090-7c04-4a96-ac15-dffa09cb67ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:82dee72a-a920-4f76-8c31-ae7a257839c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6767,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:406:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:0c46f97b-6659-4f0e-a920-0ae38d5cd2d4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6867,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:4ef8565a-0cdd-4248-921d-485981357b07",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6970,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:ab6e0f1b-7f93-41a5-bf17-5b394603c098",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7077,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:437:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:a19a555a-bd25-4da7-83e9-8c2b25605b4a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7173,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:bac6f703-c960-489c-8f5e-119d9c0e16f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7273,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:d45c8901-739c-4d77-af44-e274196f0b5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5770,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "stt1ETuuFPP0J5dkZbwNk",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:40cedecb-ebf8-433c-a3e8-8e1a6c73174e"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:451d6dd5-435f-455e-9bbb-ec4c116dbb91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 310,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:f7fec457-0f2b-48f3-b435-4fb6aaf897dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7773,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:cce80e22-a7e9-448d-b8be-6ce4f120457c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7857,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:b04b40c8-2aac-4d1a-865a-b964d93c134b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7941,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:95aecdf5-627f-4e27-9fff-3ae3d7e15f9c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8028,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:f003b6b6-bc27-4a74-82ac-fe0f40fa8f64",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8119,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:f37e353c-de86-4a2e-bbb0-77d399a81ab9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:474a39c2-c1cc-4e12-b1c6-25e742d3f7c8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8297,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:4761335e-e0fa-4c09-9c1e-b9ad3e8ea0d0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8380,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:23e9af58-629b-40f3-8ea0-fe6a71e775c0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8464,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:41184031-8c15-4419-8674-74663351367e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8553,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:4374e3ae-a2da-48c0-b73c-4ef430b381da",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8640,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:7490a35e-e7e8-499c-b3c2-5dd12adb5cab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8727,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:5aeb0a10-6e66-47ca-b1b4-6f3c871f33f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8824,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:4378b8de-fedc-4a05-8e34-a7b784b3e143",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8911,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID: P-256\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "stt1ETuuFPP0J5dkZbwNk",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:bdefa22e-f4d8-4b46-bc3d-96877f4a6a5e"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:13b9b016-c749-4acc-9099-91d6ce110a11",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 731,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:c335ad45-253d-4d32-8732-70f0ee11f901",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9730,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:20abe06f-0ce3-42e0-a626-e3ad18393df9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9893,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:20e0b7c8-5fde-49c7-b7d2-26ab2e4ad950",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10057,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:ca953152-9557-452b-850c-3b9e02a39703",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10220,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 165,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:768387d6-d381-454a-a544-e5e54b56373b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:0fc0eca8-4a1c-4460-96fd-a9739c3bbc04",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:d8f9cd81-98bc-4050-b18d-1e83469f15c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10714,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:3e5f30fa-b975-4dfc-af0e-5c71fd5315a2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10879,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:8d4b3631-9365-4f12-a01a-1ec3e9a7c77f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11043,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:09e4e650-53dc-4cc2-acc8-acbfe3b6c775",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11207,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:5c573f01-539a-4f5b-93cf-42ac44b9d445",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11371,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:b8531993-8cc7-4f03-9435-7ce6a4909569",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:7e508b3f-b2a7-451a-a759-012b5025db70",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11700,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 166,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:a01129e4-8527-4480-a9d2-b0de70c1864a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11866,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine: P-256\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "stt1ETuuFPP0J5dkZbwNk",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:5388747c-dd32-4ddf-b0a1-01bb183367d6"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lvjmgZGODL3QiWlcH48Cg",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:c568a952-286e-4328-bbe3-ba74b53645d3",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "If the \"proof\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:625f26ac-84c4-47f6-af0a-d3614792080e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4341,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:665bc23d-79b6-4aaa-91e5-b1a8b9d21778",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5770,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 315,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:451d6dd5-435f-455e-9bbb-ec4c116dbb91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 310,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:13b9b016-c749-4acc-9099-91d6ce110a11",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 731,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:571d9112-25b0-43ad-a0b1-1086a04da9d0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4412,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 74,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:0fb25e50-88b2-46f5-93be-308f55ba11f2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6085,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:f7fec457-0f2b-48f3-b435-4fb6aaf897dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7773,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:c335ad45-253d-4d32-8732-70f0ee11f901",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9730,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:3a6aa5ca-2a09-40ce-800e-4cc091641380",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4486,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:5a4cd1cc-275d-403f-bd28-6325568d51b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6182,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:cce80e22-a7e9-448d-b8be-6ce4f120457c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7857,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:20abe06f-0ce3-42e0-a626-e3ad18393df9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9893,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:cb9be192-d44c-4049-87fc-5b34e146fc20",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4570,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:1b4a0231-556c-4f81-b262-31f57ce34eb1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6278,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:b04b40c8-2aac-4d1a-865a-b964d93c134b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7941,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:20e0b7c8-5fde-49c7-b7d2-26ab2e4ad950",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10057,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:35cf6f7c-4f08-4711-b910-789e9ed29a00",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4664,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:1a5d3851-3d5c-407f-b01d-8afa19a7079f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6372,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:95aecdf5-627f-4e27-9fff-3ae3d7e15f9c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8028,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:ca953152-9557-452b-850c-3b9e02a39703",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10220,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 165,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:7cd8e2fc-88ae-481d-a545-64ada3dab5d3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4770,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:f95fc475-cf99-460b-b613-1cc6ccb50784",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6471,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:f003b6b6-bc27-4a74-82ac-fe0f40fa8f64",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8119,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:768387d6-d381-454a-a544-e5e54b56373b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:71894283-0ea7-443f-b697-2f08b6140dc1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4871,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:d856857b-9e52-4705-bdf1-8fd46095a980",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6577,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:f37e353c-de86-4a2e-bbb0-77d399a81ab9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:0fc0eca8-4a1c-4460-96fd-a9739c3bbc04",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:6584cff0-3df2-4a4e-b35e-0fc51776c1b6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4969,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:43935090-7c04-4a96-ac15-dffa09cb67ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:474a39c2-c1cc-4e12-b1c6-25e742d3f7c8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8297,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:d8f9cd81-98bc-4050-b18d-1e83469f15c9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10714,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:fcffcede-16dd-4c95-bca5-fb67ce56ec7a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5072,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:82dee72a-a920-4f76-8c31-ae7a257839c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6767,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:406:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:4761335e-e0fa-4c09-9c1e-b9ad3e8ea0d0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8380,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:3e5f30fa-b975-4dfc-af0e-5c71fd5315a2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10879,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:65aaf45e-ce9a-4521-868b-a360f4fc8ae6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5169,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:0c46f97b-6659-4f0e-a920-0ae38d5cd2d4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6867,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:23e9af58-629b-40f3-8ea0-fe6a71e775c0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8464,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:8d4b3631-9365-4f12-a01a-1ec3e9a7c77f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11043,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:68e636fa-c006-43dc-9699-3c6006b0d8b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5271,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:4ef8565a-0cdd-4248-921d-485981357b07",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6970,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:41184031-8c15-4419-8674-74663351367e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8553,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:09e4e650-53dc-4cc2-acc8-acbfe3b6c775",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11207,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.created\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:f12292bf-c605-422a-8ba0-61fa869e8c27",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5369,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:ab6e0f1b-7f93-41a5-bf17-5b394603c098",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7077,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:437:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:4374e3ae-a2da-48c0-b73c-4ef430b381da",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8640,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:5c573f01-539a-4f5b-93cf-42ac44b9d445",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11371,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:2e628005-c858-47d3-b507-8ec225cbb1bf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5477,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:a19a555a-bd25-4da7-83e9-8c2b25605b4a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7173,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:7490a35e-e7e8-499c-b3c2-5dd12adb5cab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8727,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:b8531993-8cc7-4f03-9435-7ce6a4909569",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:ce8d491f-ab4d-4327-985c-1fdb79b44de0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5570,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:bac6f703-c960-489c-8f5e-119d9c0e16f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7273,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:5aeb0a10-6e66-47ca-b1b4-6f3c871f33f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8824,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:7e508b3f-b2a7-451a-a759-012b5025db70",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11700,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 166,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "nCRKQ2dccbiQhc9n2sDBX",
              "ctx": null,
              "_testId": "urn:uuid:805449a9-12f4-474e-a73d-15b874f194fb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "_8cWr5j5PW--VtsVKTnen",
              "ctx": null,
              "_testId": "urn:uuid:d45c8901-739c-4d77-af44-e274196f0b5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "Jx2e6Jbakg5FEnKJJCbH5",
              "ctx": null,
              "_testId": "urn:uuid:4378b8de-fedc-4a05-8e34-a7b784b3e143",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8911,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "QaxTh6SNclK-U7cDS_olP",
              "ctx": null,
              "_testId": "urn:uuid:a01129e4-8527-4480-a9d2-b0de70c1864a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11866,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const vector of supportedVectors) {\n                await verificationSuccess({credential: vector, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "JWAcQ2QlLowtrDO5SFMHI",
              "ctx": null,
              "_testId": "urn:uuid:ac11441c-04f6-4afc-90fa-b1feaf5648f9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12044,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1929,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"issuanceDate\":\"2024-03-03T05:05:33Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-03-03T05:05:33Z\",\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z26DDwA8JXwfb28wyNwgZs55Q6vD7TDmtNhxRDYN745qhVpPrZJahP4VwpV14gm4T4UJrsD4DFjc73MoWJm5JNw35puvCZJMfFCQjSXLQx2nB4onD763WE3RZeKSQN7cCB7Tj\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                        "issuanceDate": "2024-03-03T05:05:33Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-03-03T05:05:33Z",
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z26DDwA8JXwfb28wyNwgZs55Q6vD7TDmtNhxRDYN745qhVpPrZJahP4VwpV14gm4T4UJrsD4DFjc73MoWJm5JNw35puvCZJMfFCQjSXLQx2nB4onD763WE3RZeKSQN7cCB7Tj"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js:62:17)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const vector of supportedVectors) {\n              const credential = klona(vector);\n              //FIXME add invalid-cryptosuite as a valid cryptosuite name\n              //locally so the signature is correct, but the cryptosuite\n              //name is incorrect\n              credential.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({credential, verifier});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "JWAcQ2QlLowtrDO5SFMHI",
              "ctx": null,
              "_testId": "urn:uuid:ebddeaab-f54d-47d8-8424-9c07462db6b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13975,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 495,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256, P-384\"",
              "body": "function() {\n            // filter the test data to only include VC signed with\n            // keyTypes the verifier supports\n            supportedVectors = verifierKeyTypes.map(\n              (keyType = '') => testVectors.get(keyType.toUpperCase()));\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "JWAcQ2QlLowtrDO5SFMHI",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "lPcYFNmjwN59DaXP-kBic",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:122629b0-3830-4f07-8fc4-07f338a2ab15"
        },
        {
          "title": "Digital Bazaar: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const vector of supportedVectors) {\n                await verificationSuccess({credential: vector, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "xIb4qw6Kb08PstwtQ059R",
              "ctx": null,
              "_testId": "urn:uuid:64d70266-5897-4053-828b-78443bcc7a5d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 442,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const vector of supportedVectors) {\n              const credential = klona(vector);\n              //FIXME add invalid-cryptosuite as a valid cryptosuite name\n              //locally so the signature is correct, but the cryptosuite\n              //name is incorrect\n              credential.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({credential, verifier});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "xIb4qw6Kb08PstwtQ059R",
              "ctx": null,
              "_testId": "urn:uuid:65e0da17-d81f-45b8-9059-46eafd7f806e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 194,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256, P-384\"",
              "body": "function() {\n            // filter the test data to only include VC signed with\n            // keyTypes the verifier supports\n            supportedVectors = verifierKeyTypes.map(\n              (keyType = '') => testVectors.get(keyType.toUpperCase()));\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xIb4qw6Kb08PstwtQ059R",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "lPcYFNmjwN59DaXP-kBic",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:3981e934-87fc-4c73-b1bf-6e5a634d5231"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const vector of supportedVectors) {\n                await verificationSuccess({credential: vector, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "FWtffu5y220iLRB4uNPfr",
              "ctx": null,
              "_testId": "urn:uuid:b384a473-b28c-4688-a591-bc8d465f4848",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 337,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"issuanceDate\":\"2024-03-03T05:05:33Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-03-03T05:05:33Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4gBQBRP7WHAeARqeQe7u6vG4XzwF6qaCPB5tXKy2EaqCBAp9n2L2GYfEHtUyJ8GYStfrHA2R7mgmvYQJeZrRrbAZ\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "issuanceDate": "2024-03-03T05:05:33Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-03-03T05:05:33Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z4gBQBRP7WHAeARqeQe7u6vG4XzwF6qaCPB5tXKy2EaqCBAp9n2L2GYfEHtUyJ8GYStfrHA2R7mgmvYQJeZrRrbAZ"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js:62:17)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const vector of supportedVectors) {\n              const credential = klona(vector);\n              //FIXME add invalid-cryptosuite as a valid cryptosuite name\n              //locally so the signature is correct, but the cryptosuite\n              //name is incorrect\n              credential.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({credential, verifier});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "FWtffu5y220iLRB4uNPfr",
              "ctx": null,
              "_testId": "urn:uuid:31d6d99c-0567-48d8-a0a9-043bc427f8e2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15444,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 331,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID: P-256\"",
              "body": "function() {\n            // filter the test data to only include VC signed with\n            // keyTypes the verifier supports\n            supportedVectors = verifierKeyTypes.map(\n              (keyType = '') => testVectors.get(keyType.toUpperCase()));\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "FWtffu5y220iLRB4uNPfr",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "lPcYFNmjwN59DaXP-kBic",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:49068fe9-5655-414b-a6b3-c6584fe86e2b"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const vector of supportedVectors) {\n                await verificationSuccess({credential: vector, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "mDOmR4Jky4fktoss2yn63",
              "ctx": null,
              "_testId": "urn:uuid:73c50c1f-dc33-458a-b172-55fa7c16572e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15776,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 170,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const vector of supportedVectors) {\n              const credential = klona(vector);\n              //FIXME add invalid-cryptosuite as a valid cryptosuite name\n              //locally so the signature is correct, but the cryptosuite\n              //name is incorrect\n              credential.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({credential, verifier});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "mDOmR4Jky4fktoss2yn63",
              "ctx": null,
              "_testId": "urn:uuid:647bcac7-154f-4523-bccd-2d7b1fdedcaa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15947,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine: P-256\"",
              "body": "function() {\n            // filter the test data to only include VC signed with\n            // keyTypes the verifier supports\n            supportedVectors = verifierKeyTypes.map(\n              (keyType = '') => testVectors.get(keyType.toUpperCase()));\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "mDOmR4Jky4fktoss2yn63",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "lPcYFNmjwN59DaXP-kBic",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:c1646668-1cb8-4570-ae99-fe0389c1fffb"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (verifiers)\"",
          "body": "async function() {\n      testVectors = await issueTestData({\n        credential: credentials.verify.document,\n        suite: 'ecdsa-rdfc-2019',\n        keyTypes\n      });\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "lPcYFNmjwN59DaXP-kBic",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 12031,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 14,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "oBSi5b5t8ztj5UCoG2bMe",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:dc7dec6c-6fe6-4b68-8d7f-4754e82e149b",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const vector of supportedVectors) {\n                await verificationSuccess({credential: vector, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "JWAcQ2QlLowtrDO5SFMHI",
              "ctx": null,
              "_testId": "urn:uuid:ac11441c-04f6-4afc-90fa-b1feaf5648f9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12044,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1929,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"issuanceDate\":\"2024-03-03T05:05:33Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-03-03T05:05:33Z\",\"verificationMethod\":\"did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z26DDwA8JXwfb28wyNwgZs55Q6vD7TDmtNhxRDYN745qhVpPrZJahP4VwpV14gm4T4UJrsD4DFjc73MoWJm5JNw35puvCZJMfFCQjSXLQx2nB4onD763WE3RZeKSQN7cCB7Tj\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                        "issuanceDate": "2024-03-03T05:05:33Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-03-03T05:05:33Z",
                          "verificationMethod": "did:key:z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ#z82LkuBieyGShVBhvtE2zoiD6Kma4tJGFtkAhxR5pfkp5QPw4LutoYWhvQCnGjdVn14kujQ",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z26DDwA8JXwfb28wyNwgZs55Q6vD7TDmtNhxRDYN745qhVpPrZJahP4VwpV14gm4T4UJrsD4DFjc73MoWJm5JNw35puvCZJMfFCQjSXLQx2nB4onD763WE3RZeKSQN7cCB7Tj"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js:62:17)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const vector of supportedVectors) {\n                await verificationSuccess({credential: vector, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "xIb4qw6Kb08PstwtQ059R",
              "ctx": null,
              "_testId": "urn:uuid:64d70266-5897-4053-828b-78443bcc7a5d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 442,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const vector of supportedVectors) {\n                await verificationSuccess({credential: vector, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "FWtffu5y220iLRB4uNPfr",
              "ctx": null,
              "_testId": "urn:uuid:b384a473-b28c-4688-a591-bc8d465f4848",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 337,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:36245ee9-9074-4b05-a777-febff2e69757\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"issuanceDate\":\"2024-03-03T05:05:33Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-03-03T05:05:33Z\",\"verificationMethod\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4gBQBRP7WHAeARqeQe7u6vG4XzwF6qaCPB5tXKy2EaqCBAp9n2L2GYfEHtUyJ8GYStfrHA2R7mgmvYQJeZrRrbAZ\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:36245ee9-9074-4b05-a777-febff2e69757",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "issuanceDate": "2024-03-03T05:05:33Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-03-03T05:05:33Z",
                          "verificationMethod": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP#zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z4gBQBRP7WHAeARqeQe7u6vG4XzwF6qaCPB5tXKy2EaqCBAp9n2L2GYfEHtUyJ8GYStfrHA2R7mgmvYQJeZrRrbAZ"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js:62:17)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const vector of supportedVectors) {\n                await verificationSuccess({credential: vector, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "mDOmR4Jky4fktoss2yn63",
              "ctx": null,
              "_testId": "urn:uuid:73c50c1f-dc33-458a-b172-55fa7c16572e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15776,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 170,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const vector of supportedVectors) {\n              const credential = klona(vector);\n              //FIXME add invalid-cryptosuite as a valid cryptosuite name\n              //locally so the signature is correct, but the cryptosuite\n              //name is incorrect\n              credential.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({credential, verifier});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "JWAcQ2QlLowtrDO5SFMHI",
              "ctx": null,
              "_testId": "urn:uuid:ebddeaab-f54d-47d8-8424-9c07462db6b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13975,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 495,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const vector of supportedVectors) {\n              const credential = klona(vector);\n              //FIXME add invalid-cryptosuite as a valid cryptosuite name\n              //locally so the signature is correct, but the cryptosuite\n              //name is incorrect\n              credential.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({credential, verifier});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "xIb4qw6Kb08PstwtQ059R",
              "ctx": null,
              "_testId": "urn:uuid:65e0da17-d81f-45b8-9059-46eafd7f806e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 194,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const vector of supportedVectors) {\n              const credential = klona(vector);\n              //FIXME add invalid-cryptosuite as a valid cryptosuite name\n              //locally so the signature is correct, but the cryptosuite\n              //name is incorrect\n              credential.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({credential, verifier});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "FWtffu5y220iLRB4uNPfr",
              "ctx": null,
              "_testId": "urn:uuid:31d6d99c-0567-48d8-a0a9-043bc427f8e2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15444,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 331,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const vector of supportedVectors) {\n              const credential = klona(vector);\n              //FIXME add invalid-cryptosuite as a valid cryptosuite name\n              //locally so the signature is correct, but the cryptosuite\n              //name is incorrect\n              credential.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({credential, verifier});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "mDOmR4Jky4fktoss2yn63",
              "ctx": null,
              "_testId": "urn:uuid:647bcac7-154f-4523-bccd-2d7b1fdedcaa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15947,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 16111,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 257,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 16369,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 202,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 16570,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 494,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 17064,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 405,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 17469,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 404,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 17873,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 492,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 18365,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 388,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 18753,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 455,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 19208,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 170,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 19378,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 139,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 19518,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 398,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 19915,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 151,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 20066,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 102,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 20168,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 348,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 20516,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 96,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 20612,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 106,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 20719,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 180,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 20898,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 183,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 21081,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 176,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "xxSQelaRiuRFaUSS1R76M",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 21257,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 170,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lvjmgZGODL3QiWlcH48Cg",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:69b3efd1-3fe1-4651-ac60-eb6f99ea2e63",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "apicatalog.com: P-256, P-384",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:9bbe7622-b071-4488-b698-5fd9044e475d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256, P-384",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22394,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 281,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:4e206bad-b91a-422e-9139-c0e391cb058c\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"issuanceDate\":\"2024-03-03T05:05:39Z\",\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-03-03T05:05:39Z\",\"proofValue\":\"zPziSxapn154qWPbaUtCMkCYBrVPg5AtnL37m1PJSYoCYm5j6Z8gEnSbiFaMrPdwuZ2E7EeWdizRNU5j2fAeZBMo\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:4e206bad-b91a-422e-9139-c0e391cb058c",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "issuanceDate": "2024-03-03T05:05:39Z",
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-03-03T05:05:39Z",
                          "proofValue": "zPziSxapn154qWPbaUtCMkCYBrVPg5AtnL37m1PJSYoCYm5j6Z8gEnSbiFaMrPdwuZ2E7EeWdizRNU5j2fAeZBMo"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:93:11)"
              }
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:f5d0f442-1c53-456e-bb9e-20dac89cf36b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256, P-384",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22676,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 124,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:f0d2cbc0-d6ed-4787-8cb5-ac9e79944111",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "issuanceDate": "2024-03-03T05:05:39Z",
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-03-03T05:05:40Z",
                          "proofValue": "zLG8farQbUHmQGK7SikabsWuDEgEg8bZmR5L1S9CR1uDAo8hShPPpWWAw95mPW9p6zKbJcH95uDUQGGkb9oEJFHw"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:f0d2cbc0-d6ed-4787-8cb5-ac9e79944111\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"issuanceDate\":\"2024-03-03T05:05:39Z\",\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-03-03T05:05:40Z\",\"proofValue\":\"zLG8farQbUHmQGK7SikabsWuDEgEg8bZmR5L1S9CR1uDAo8hShPPpWWAw95mPW9p6zKbJcH95uDUQGGkb9oEJFHw\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://verifier.qa.veres.app/verifiers/z19jXQPi819fJVaBRFxZXqXay/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            {
                              "@protected": true,
                              "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                              "DriverLicense": {
                                "@id": "urn:example:DriverLicense",
                                "@context": {
                                  "@protected": true,
                                  "id": "@id",
                                  "type": "@type",
                                  "documentIdentifier": "urn:example:documentIdentifier",
                                  "dateOfBirth": "urn:example:dateOfBirth",
                                  "expirationDate": "urn:example:expiration",
                                  "issuingAuthority": "urn:example:issuingAuthority"
                                }
                              },
                              "driverLicense": {
                                "@id": "urn:example:driverLicense",
                                "@type": "@id"
                              }
                            },
                            "https://w3id.org/security/suites/ed25519-2020/v1"
                          ],
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-03-03T05:05:40Z",
                          "proofValue": "zLG8farQbUHmQGK7SikabsWuDEgEg8bZmR5L1S9CR1uDAo8hShPPpWWAw95mPW9p6zKbJcH95uDUQGGkb9oEJFHw"
                        },
                        "verified": false,
                        "error": {
                          "name": "VerificationError",
                          "message": "Invalid signature."
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Invalid signature.",
                          "stack": "Error: Invalid signature.\n    at Ed25519Signature2020.verifyProof (/home/node/app/node_modules/jsonld-signatures/lib/suites/LinkedDataSignature.js:202:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:268:53\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:256:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:331:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:280:12)\n    at async file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/http.js:89:24"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:f0d2cbc0-d6ed-4787-8cb5-ac9e79944111",
                        "error": "Invalid signature.",
                        "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:93:11)"
              }
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:c82b4477-1651-4576-b339-800166a585c6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256, P-384",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22141,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 85,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:7eb256bc-2eed-4001-8eca-072b10cd0076\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"issuanceDate\":\"2024-03-03T05:05:38Z\",\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-03-03T05:05:38Z\",\"proofValue\":\"z4DJDoNm2UNPxhn8VFx2YfWLdgEqtbPk22U7DGqooGw8xkq7AboTkUPKWKBXvnRNTFtJWN63862MKsNafiYFtceha\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:7eb256bc-2eed-4001-8eca-072b10cd0076",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "issuanceDate": "2024-03-03T05:05:38Z",
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-03-03T05:05:38Z",
                          "proofValue": "z4DJDoNm2UNPxhn8VFx2YfWLdgEqtbPk22U7DGqooGw8xkq7AboTkUPKWKBXvnRNTFtJWN63862MKsNafiYFtceha"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:93:11)"
              }
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:49fdf3c4-1ec7-4521-b506-76e55d48fb42",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256, P-384",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22227,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/suites/ed25519-2020/v1\"],\"id\":\"urn:uuid:34f6cf0d-8ca3-40bd-b75b-5d9fc45e3f42\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP\",\"issuanceDate\":\"2024-03-03T05:05:39Z\",\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"Ed25519Signature2020\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-03-03T05:05:39Z\",\"proofValue\":\"z5gZ54KtYcwkbMtodLS77ypTyA6qxaRaH7BsJskXYYfU7tW8YN3rSfdCjRqTK9JHzBYRciTzit9yjK1iPvGGvLMQY\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/suites/ed25519-2020/v1"
                        ],
                        "id": "urn:uuid:34f6cf0d-8ca3-40bd-b75b-5d9fc45e3f42",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaepBuvsQ8cpsWrVKw8fbpGpvPeNSjVPTWoq6cRqaYzBKVP",
                        "issuanceDate": "2024-03-03T05:05:39Z",
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "Ed25519Signature2020",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-03-03T05:05:39Z",
                          "proofValue": "z5gZ54KtYcwkbMtodLS77ypTyA6qxaRaH7BsJskXYYfU7tW8YN3rSfdCjRqTK9JHzBYRciTzit9yjK1iPvGGvLMQY"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:93:11)"
              }
            }
          ]
        },
        {
          "id": "Digital Bazaar: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:edd35f5e-bc4d-4147-89d3-dfe78db8ff72",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22799,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 179,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:bf953662-443e-4e2e-8763-f1c2dc459725",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22979,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:b268f93b-4dcf-41e7-9d41-ef882d9a2d85",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23111,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:90ecb3f3-f36c-4c3c-880f-0a24f16880da\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:zDnaejxchrX8JPdPNWxU7R6DPnYpGpFnB9G1PbjVHFdx2fDCL\",\"issuanceDate\":\"2024-03-03T05:05:41Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-03-03T05:05:41Z\",\"verificationMethod\":\"did:key:zDnaejxchrX8JPdPNWxU7R6DPnYpGpFnB9G1PbjVHFdx2fDCL#zDnaejxchrX8JPdPNWxU7R6DPnYpGpFnB9G1PbjVHFdx2fDCL\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2NDckZRsjFwCtixo1k9HnbkW4EENmDsQg3jrMSmiVt5LwAUs6KoDivy62RPshH2GyESYsu7qfRi8W2huyUxHntvr\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:90ecb3f3-f36c-4c3c-880f-0a24f16880da",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:zDnaejxchrX8JPdPNWxU7R6DPnYpGpFnB9G1PbjVHFdx2fDCL",
                        "issuanceDate": "2024-03-03T05:05:41Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-03-03T05:05:41Z",
                          "verificationMethod": "did:key:zDnaejxchrX8JPdPNWxU7R6DPnYpGpFnB9G1PbjVHFdx2fDCL#zDnaejxchrX8JPdPNWxU7R6DPnYpGpFnB9G1PbjVHFdx2fDCL",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2NDckZRsjFwCtixo1k9HnbkW4EENmDsQg3jrMSmiVt5LwAUs6KoDivy62RPshH2GyESYsu7qfRi8W2huyUxHntvr"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:93:11)"
              }
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:033bf24f-379a-4a0a-9765-e8dde9a20f88",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23202,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 171,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Digital Bazaar: P-384",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"Digital Bazaar: P-384\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:a05d00ae-8be3-42f6-ae7d-e6dd0df00531",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23373,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 496,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"DriverLicense\":{\"@id\":\"urn:example:DriverLicense\",\"@context\":{\"@protected\":true,\"id\":\"@id\",\"type\":\"@type\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"dateOfBirth\":\"urn:example:dateOfBirth\",\"expirationDate\":\"urn:example:expiration\",\"issuingAuthority\":\"urn:example:issuingAuthority\"}},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:45fb1406-89e9-4603-8815-a2bbfd96a3d6\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"type\":\"DriverLicense\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"dateOfBirth\":\"01-01-1990\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\"}},\"issuer\":\"did:key:z82Lky21MA8mGLTpsgvGnikRjS12Ar8wik7L3BJi9xSvU89rZaKcNRrcddPHhNFTWdR84oB\",\"issuanceDate\":\"2024-03-03T05:05:41Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-03-03T05:05:41Z\",\"verificationMethod\":\"did:key:z82Lky21MA8mGLTpsgvGnikRjS12Ar8wik7L3BJi9xSvU89rZaKcNRrcddPHhNFTWdR84oB#z82Lky21MA8mGLTpsgvGnikRjS12Ar8wik7L3BJi9xSvU89rZaKcNRrcddPHhNFTWdR84oB\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z32fyZBMh2x1rvJHn9cGxXYEWj5RBKZYiP8Bbbxo1B4wTtN897DqNW1bCarrEGUjPnK7mx44HZA44rdpxoTsHGWu6bAX5GSLhLGZUr1kfGsHxvLAgjQTxiWj3xSSCM83JL75\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "DriverLicense": {
                              "@id": "urn:example:DriverLicense",
                              "@context": {
                                "@protected": true,
                                "id": "@id",
                                "type": "@type",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "expirationDate": "urn:example:expiration",
                                "issuingAuthority": "urn:example:issuingAuthority"
                              }
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:45fb1406-89e9-4603-8815-a2bbfd96a3d6",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "type": "DriverLicense",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "dateOfBirth": "01-01-1990",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA"
                          }
                        },
                        "issuer": "did:key:z82Lky21MA8mGLTpsgvGnikRjS12Ar8wik7L3BJi9xSvU89rZaKcNRrcddPHhNFTWdR84oB",
                        "issuanceDate": "2024-03-03T05:05:41Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-03-03T05:05:41Z",
                          "verificationMethod": "did:key:z82Lky21MA8mGLTpsgvGnikRjS12Ar8wik7L3BJi9xSvU89rZaKcNRrcddPHhNFTWdR84oB#z82Lky21MA8mGLTpsgvGnikRjS12Ar8wik7L3BJi9xSvU89rZaKcNRrcddPHhNFTWdR84oB",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z32fyZBMh2x1rvJHn9cGxXYEWj5RBKZYiP8Bbbxo1B4wTtN897DqNW1bCarrEGUjPnK7mx44HZA44rdpxoTsHGWu6bAX5GSLhLGZUr1kfGsHxvLAgjQTxiWj3xSSCM83JL75"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_SIGNATURE"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:93:11)"
              }
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Digital Bazaar: P-384\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:621e4093-646d-48f0-961f-4d216663dd43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23870,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "colId": "SpruceID: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "colId": "bovine: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "SpruceID: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:3c2f6736-8282-4c6e-a839-c941ef11de06",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23974,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2337,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"@protected\":true,\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"},\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"id\":\"urn:uuid:6fc5d906-a7d0-46af-b4e0-02955ae5a2a1\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"}},\"issuer\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"issuanceDate\":\"2024-03-03T05:05:42Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/data-integrity/v1\"],\"type\":\"DataIntegrityProof\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z42TyZd34j1gAc9ue3JDdS2ShVjjQB41BMmrdFqea832vCiyB1PWJVqfs3S8A7pAf3YCB3cvPTXLjG743mPpa4cv3\",\"verificationMethod\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"created\":\"2024-03-03T05:05:42.069Z\",\"cryptosuite\":\"ecdsa-2019\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "@protected": true,
                            "DriverLicense": {
                              "@context": {
                                "@protected": true,
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "expirationDate": "urn:example:expiration",
                                "id": "@id",
                                "issuingAuthority": "urn:example:issuingAuthority",
                                "type": "@type"
                              },
                              "@id": "urn:example:DriverLicense"
                            },
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "id": "urn:uuid:6fc5d906-a7d0-46af-b4e0-02955ae5a2a1",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "dateOfBirth": "01-01-1990",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA",
                            "type": "DriverLicense"
                          }
                        },
                        "issuer": "did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc",
                        "issuanceDate": "2024-03-03T05:05:42Z",
                        "proof": {
                          "@context": [
                            "https://w3id.org/security/data-integrity/v1"
                          ],
                          "type": "DataIntegrityProof",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z42TyZd34j1gAc9ue3JDdS2ShVjjQB41BMmrdFqea832vCiyB1PWJVqfs3S8A7pAf3YCB3cvPTXLjG743mPpa4cv3",
                          "verificationMethod": "did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc",
                          "created": "2024-03-03T05:05:42.069Z",
                          "cryptosuite": "ecdsa-2019"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_PROOF_CONFIGURATION"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:93:11)"
              }
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:661a91a6-293e-475b-9f86-99b215f24c54",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26312,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:516c470f-27b4-48da-8da9-d75300dd256a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26417,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:4ade8fa6-5312-4410-8c0c-528341577fea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26510,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"},\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}}],\"id\":\"urn:uuid:7b555c64-2a2f-4b5d-8a2e-23243ac91023\",\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"],\"credentialSubject\":{\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\",\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"}},\"issuer\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"issuanceDate\":\"2024-03-03T05:05:42Z\",\"proof\":{\"@context\":[\"https://w3id.org/security/data-integrity/v1\"],\"type\":\"DataIntegrityProof\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2NuwHd2TZ1511hPy8hW67akwYihgntuxTNQ8uECAvV6P69XSHw1gykG1jFbFZkEwW6vibppv5hDeLZ25UZE9EML7\",\"verificationMethod\":\"did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc\",\"created\":\"2024-03-03T05:05:42.609Z\",\"cryptosuite\":\"ecdsa-2019\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicense": {
                              "@context": {
                                "@protected": true,
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "expirationDate": "urn:example:expiration",
                                "id": "@id",
                                "issuingAuthority": "urn:example:issuingAuthority",
                                "type": "@type"
                              },
                              "@id": "urn:example:DriverLicense"
                            },
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          }
                        ],
                        "id": "urn:uuid:7b555c64-2a2f-4b5d-8a2e-23243ac91023",
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ],
                        "credentialSubject": {
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440",
                          "driverLicense": {
                            "dateOfBirth": "01-01-1990",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA",
                            "type": "DriverLicense"
                          }
                        },
                        "issuer": "did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc",
                        "issuanceDate": "2024-03-03T05:05:42Z",
                        "proof": {
                          "@context": [
                            "https://w3id.org/security/data-integrity/v1"
                          ],
                          "type": "DataIntegrityProof",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2NuwHd2TZ1511hPy8hW67akwYihgntuxTNQ8uECAvV6P69XSHw1gykG1jFbFZkEwW6vibppv5hDeLZ25UZE9EML7",
                          "verificationMethod": "did:key:zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc#zDnaei6w9La4VphyPA6V2V5poBTpVtjCsnzPML5c78GWjRhnc",
                          "created": "2024-03-03T05:05:42.609Z",
                          "cryptosuite": "ecdsa-2019"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:93:11)"
              }
            }
          ]
        },
        {
          "id": "bovine: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"bovine: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:de6c72bd-13ea-4692-8133-3d480b447b5c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26675,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 453,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"bovine: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:fce302cd-50b1-4089-bd32-d183b8bf2dd5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27129,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"bovine: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:c05bec35-264c-4e05-9e3e-944faaa9b84e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27231,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 85,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",{\"@protected\":true,\"DriverLicense\":{\"@context\":{\"@protected\":true,\"dateOfBirth\":\"urn:example:dateOfBirth\",\"documentIdentifier\":\"urn:example:documentIdentifier\",\"expirationDate\":\"urn:example:expiration\",\"id\":\"@id\",\"issuingAuthority\":\"urn:example:issuingAuthority\",\"type\":\"@type\"},\"@id\":\"urn:example:DriverLicense\"},\"DriverLicenseCredential\":\"urn:example:DriverLicenseCredential\",\"driverLicense\":{\"@id\":\"urn:example:driverLicense\",\"@type\":\"@id\"}},\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":{\"driverLicense\":{\"dateOfBirth\":\"01-01-1990\",\"documentIdentifier\":\"T21387yc328c7y32h23f23\",\"expirationDate\":\"01-01-2030\",\"issuingAuthority\":\"VA\",\"type\":\"DriverLicense\"},\"id\":\"urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440\"},\"id\":\"urn:uuid:1707a29e-f010-4454-8e08-ac4705b44014\",\"issuanceDate\":\"2024-03-03T05:05:43Z\",\"issuer\":\"did:key:zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr\",\"proof\":{\"created\":\"2024-03-03T05:05:43Z\",\"cryptosuite\":\"ecdsa-rdfc-2019\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zaTizee4KnZHA2Uaqii7MJecv4WpzXgGkgDW7bdi3GRGVaZBi6vvUHXbPAx6SnDEFG7LqLkL3LNPDLZAetJXWVW8\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr#zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr\"},\"type\":[\"VerifiableCredential\",\"DriverLicenseCredential\"]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          {
                            "@protected": true,
                            "DriverLicense": {
                              "@context": {
                                "@protected": true,
                                "dateOfBirth": "urn:example:dateOfBirth",
                                "documentIdentifier": "urn:example:documentIdentifier",
                                "expirationDate": "urn:example:expiration",
                                "id": "@id",
                                "issuingAuthority": "urn:example:issuingAuthority",
                                "type": "@type"
                              },
                              "@id": "urn:example:DriverLicense"
                            },
                            "DriverLicenseCredential": "urn:example:DriverLicenseCredential",
                            "driverLicense": {
                              "@id": "urn:example:driverLicense",
                              "@type": "@id"
                            }
                          },
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": {
                          "driverLicense": {
                            "dateOfBirth": "01-01-1990",
                            "documentIdentifier": "T21387yc328c7y32h23f23",
                            "expirationDate": "01-01-2030",
                            "issuingAuthority": "VA",
                            "type": "DriverLicense"
                          },
                          "id": "urn:uuid:1a0e4ef5-091f-4060-842e-18e519ab9440"
                        },
                        "id": "urn:uuid:1707a29e-f010-4454-8e08-ac4705b44014",
                        "issuanceDate": "2024-03-03T05:05:43Z",
                        "issuer": "did:key:zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr",
                        "proof": {
                          "created": "2024-03-03T05:05:43Z",
                          "cryptosuite": "ecdsa-rdfc-2019",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "zaTizee4KnZHA2Uaqii7MJecv4WpzXgGkgDW7bdi3GRGVaZBi6vvUHXbPAx6SnDEFG7LqLkL3LNPDLZAetJXWVW8",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr#zDnaeRpdr3KkQ1NtBhLAWFp76epvaU1spZzGH7AvKtY9KqjZr"
                        },
                        "type": [
                          "VerifiableCredential",
                          "DriverLicenseCredential"
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "beforeError": [],
                      "afterResponse": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:93:11)"
              }
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"bovine: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "xxSQelaRiuRFaUSS1R76M",
              "ctx": null,
              "_testId": "urn:uuid:ac334acf-a3a1-42e0-96af-fdfb52a5a873",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27316,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 177,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (ecdsa-sd-2023 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:a6f786bc-0807-4ed6-a70e-0c6a9d337f5d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:5631c691-a63a-4ad9-b5b6-bc9f23ed7595",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:c8b30b1d-78f2-4273-b4ab-9da79caee7b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:be5d5e61-7728-4410-969e-397759d952e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:6f744f5c-4228-4eba-9d44-0f6ba97b75e5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:070b2c86-9cf8-444d-863e-c88761f12084",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:5c230bbb-168d-44e4-a5de-a9a77fee1b58",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:919f5546-6e08-4ddf-b06c-253194c85ad2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:3491785d-508e-4910-8268-2e140487ecec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:869dc8d7-2f3c-47de-9474-43aca5ec2fd4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:3d5f7f83-e14f-4782-b35f-abadfeadc946",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"proof.proofValue\" to be multibase-encoded base58-btc value.: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected \"proof.proofValue\" to be multibase-encoded base58-btc value.: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:231:17)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:874a43f0-9829-4091-81b3-a255d25399cc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:58006cf6-6606-458c-b950-7499e86183c1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:9724ca84-12b3-4685-bd84-a98365b214db",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:799de466-ee17-4bb2-ac15-604bc83290bc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 640,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "dS429BgmRru4rtW9WF7EI",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
          "_testId": "urn:uuid:a10223eb-0a63-40c4-b485-a1cf46d86a10"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:429849e2-d9b8-4de1-bb1a-56b8cc41609a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:1f9898c5-0321-412e-969f-03763390dfff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:cdacfc05-4d1f-4cd5-b566-32fa078c4d80",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:4d2ec0f5-e5b0-4d87-9101-1dd5379037c0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:f015e619-b435-49f7-8c1c-fb4c56abb2ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:1a264c24-f7a6-4de7-939a-d7641ac91100",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:34bc736a-cdfc-478c-ac80-b38404f17ca2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:12654d8f-4aa5-4fa4-96eb-52911341f29b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:c6aa3f61-ad32-4729-893b-57c7e39c37f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:d7641597-b524-4650-8853-c1d57b9b02b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:5f0adc90-1034-47fd-bf18-b7a8bb1271a7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"proof.proofValue\" to be multibase-encoded base58-btc value.: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected \"proof.proofValue\" to be multibase-encoded base58-btc value.: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:231:17)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:30905698-995c-4232-8717-7dfac1d0a5a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:f6a04ba0-95e5-4503-b542-6f8f9bc96145",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:d728bc96-8f83-4766-b6b5-5879197db868",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:d29d96f6-5196-4263-ba5f-e0a74d03b287",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28135,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "dS429BgmRru4rtW9WF7EI",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
          "_testId": "urn:uuid:730f57f1-2be5-4f5f-8199-ad6f8620bac8"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lvjmgZGODL3QiWlcH48Cg",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:ffe3c49f-3c5c-4004-bf4e-a041aaafcb4c",
      "columns": [
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:a6f786bc-0807-4ed6-a70e-0c6a9d337f5d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:429849e2-d9b8-4de1-bb1a-56b8cc41609a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.id\" field exists, it MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:5631c691-a63a-4ad9-b5b6-bc9f23ed7595",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:1f9898c5-0321-412e-969f-03763390dfff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:c8b30b1d-78f2-4273-b4ab-9da79caee7b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:cdacfc05-4d1f-4cd5-b566-32fa078c4d80",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:be5d5e61-7728-4410-969e-397759d952e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:4d2ec0f5-e5b0-4d87-9101-1dd5379037c0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.cryptosuite\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:6f744f5c-4228-4eba-9d44-0f6ba97b75e5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:f015e619-b435-49f7-8c1c-fb4c56abb2ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:070b2c86-9cf8-444d-863e-c88761f12084",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:1a264c24-f7a6-4de7-939a-d7641ac91100",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:5c230bbb-168d-44e4-a5de-a9a77fee1b58",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:34bc736a-cdfc-478c-ac80-b38404f17ca2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:919f5546-6e08-4ddf-b06c-253194c85ad2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:12654d8f-4aa5-4fa4-96eb-52911341f29b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofPurpose\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:3491785d-508e-4910-8268-2e140487ecec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:c6aa3f61-ad32-4729-893b-57c7e39c37f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofValue\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:869dc8d7-2f3c-47de-9474-43aca5ec2fd4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:d7641597-b524-4650-8853-c1d57b9b02b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:3d5f7f83-e14f-4782-b35f-abadfeadc946",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"proof.proofValue\" to be multibase-encoded base58-btc value.: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected \"proof.proofValue\" to be multibase-encoded base58-btc value.: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:231:17)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:5f0adc90-1034-47fd-bf18-b7a8bb1271a7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"proof.proofValue\" to be multibase-encoded base58-btc value.: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected \"proof.proofValue\" to be multibase-encoded base58-btc value.: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:231:17)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        },
        {
          "id": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:874a43f0-9829-4091-81b3-a255d25399cc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:30905698-995c-4232-8717-7dfac1d0a5a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.challenge\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:58006cf6-6606-458c-b950-7499e86183c1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:f6a04ba0-95e5-4503-b542-6f8f9bc96145",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:9724ca84-12b3-4685-bd84-a98365b214db",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:d728bc96-8f83-4766-b6b5-5879197db868",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "fKgS7JwTPzRFJGye5Qm9E",
              "ctx": null,
              "_testId": "urn:uuid:799de466-ee17-4bb2-ac15-604bc83290bc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "k_bPKqdvGB6eN093of8bq",
              "ctx": null,
              "_testId": "urn:uuid:d29d96f6-5196-4263-ba5f-e0a74d03b287",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              proofs.some(\n                proof => proof.cryptosuite === 'ecdsa-sd-2023'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qf_pVGZe5lgQGRHSp1q1p",
              "ctx": null,
              "_testId": "urn:uuid:d125ee5f-4842-4c4e-9793-aee6d1d39c18",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              proofs.some(\n                proof => proof.proofValue.startsWith('u')\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"proofValue\" property that starts with \"u\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qf_pVGZe5lgQGRHSp1q1p",
              "ctx": null,
              "_testId": "urn:uuid:a1d53503-8c6b-4131-8d6d-2c40fb538959",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qf_pVGZe5lgQGRHSp1q1p",
              "ctx": null,
              "_testId": "urn:uuid:89c76316-14b4-4988-8d03-ab410896daaa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qf_pVGZe5lgQGRHSp1q1p",
              "ctx": null,
              "_testId": "urn:uuid:ba33e68c-6708-4594-92c3-f9755a0099e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qf_pVGZe5lgQGRHSp1q1p",
              "ctx": null,
              "_testId": "urn:uuid:85511f66-7f16-4ac1-943c-c6e9e2c1b79b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28678,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qf_pVGZe5lgQGRHSp1q1p",
              "ctx": null,
              "_testId": "urn:uuid:9071f866-aee1-4664-acf1-8b76bec7e767",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28679,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n              issuedVc = await createInitialVc({\n                issuer,\n                vc: credentials.create.document\n                //mandatoryPointers: credentials.create.mandatoryPointers\n              });\n              // Support multiple proofs\n              proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                [issuedVc?.proof];\n              const verificationMethods = proofs.map(\n                proof => proof.verificationMethod);\n              for(const verificationMethod of verificationMethods) {\n                const verificationMethodDocument = await documentLoader({\n                  url: verificationMethod\n                });\n                verificationMethodDocuments.push(verificationMethodDocument);\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "qf_pVGZe5lgQGRHSp1q1p",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28196,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 481,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "MUUWsNF0FKhkD8uMp1Q_-",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:000fe37c-7c53-4418-852a-0514935b4f31"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              proofs.some(\n                proof => proof.cryptosuite === 'ecdsa-sd-2023'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "GAL95XWdAatycUTQZ3YvO",
              "ctx": null,
              "_testId": "urn:uuid:35c8f342-2050-45e6-9dcb-449af989559b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              proofs.some(\n                proof => proof.proofValue.startsWith('u')\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"proofValue\" property that starts with \"u\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "GAL95XWdAatycUTQZ3YvO",
              "ctx": null,
              "_testId": "urn:uuid:6fecf4d8-4346-4ee0-8d9c-ecded11889a9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "GAL95XWdAatycUTQZ3YvO",
              "ctx": null,
              "_testId": "urn:uuid:f5f02356-7381-46d5-b55b-825dd9f7dc51",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28708,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "GAL95XWdAatycUTQZ3YvO",
              "ctx": null,
              "_testId": "urn:uuid:32f2333e-c6e6-4c6e-86b7-af75b080dba5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28709,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "GAL95XWdAatycUTQZ3YvO",
              "ctx": null,
              "_testId": "urn:uuid:7b61b2c7-c061-4750-be0c-3242b7d15177",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28710,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "GAL95XWdAatycUTQZ3YvO",
              "ctx": null,
              "_testId": "urn:uuid:f3d1f7ed-ec36-48d7-af64-b9cfbb3140dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28710,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n              issuedVc = await createInitialVc({\n                issuer,\n                vc: credentials.create.document\n                //mandatoryPointers: credentials.create.mandatoryPointers\n              });\n              // Support multiple proofs\n              proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                [issuedVc?.proof];\n              const verificationMethods = proofs.map(\n                proof => proof.verificationMethod);\n              for(const verificationMethod of verificationMethods) {\n                const verificationMethodDocument = await documentLoader({\n                  url: verificationMethod\n                });\n                verificationMethodDocuments.push(verificationMethodDocument);\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "GAL95XWdAatycUTQZ3YvO",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28679,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "MUUWsNF0FKhkD8uMp1Q_-",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:2f4b9569-fef1-4069-86db-1b7ac88b5212"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "PFoy9ylUoOR9quG9olvsR",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:5da110b5-8353-4c6f-b4b6-972bed62fdb7",
      "columns": [
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              proofs.some(\n                proof => proof.cryptosuite === 'ecdsa-sd-2023'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qf_pVGZe5lgQGRHSp1q1p",
              "ctx": null,
              "_testId": "urn:uuid:d125ee5f-4842-4c4e-9793-aee6d1d39c18",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              proofs.some(\n                proof => proof.cryptosuite === 'ecdsa-sd-2023'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "GAL95XWdAatycUTQZ3YvO",
              "ctx": null,
              "_testId": "urn:uuid:35c8f342-2050-45e6-9dcb-449af989559b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The field \"proofValue\" MUST start with \"u\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              proofs.some(\n                proof => proof.proofValue.startsWith('u')\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"proofValue\" property that starts with \"u\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qf_pVGZe5lgQGRHSp1q1p",
              "ctx": null,
              "_testId": "urn:uuid:a1d53503-8c6b-4131-8d6d-2c40fb538959",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              proofs.some(\n                proof => proof.proofValue.startsWith('u')\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"proofValue\" property that starts with \"u\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "GAL95XWdAatycUTQZ3YvO",
              "ctx": null,
              "_testId": "urn:uuid:6fecf4d8-4346-4ee0-8d9c-ecded11889a9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qf_pVGZe5lgQGRHSp1q1p",
              "ctx": null,
              "_testId": "urn:uuid:89c76316-14b4-4988-8d03-ab410896daaa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "GAL95XWdAatycUTQZ3YvO",
              "ctx": null,
              "_testId": "urn:uuid:f5f02356-7381-46d5-b55b-825dd9f7dc51",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28708,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qf_pVGZe5lgQGRHSp1q1p",
              "ctx": null,
              "_testId": "urn:uuid:ba33e68c-6708-4594-92c3-f9755a0099e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "GAL95XWdAatycUTQZ3YvO",
              "ctx": null,
              "_testId": "urn:uuid:32f2333e-c6e6-4c6e-86b7-af75b080dba5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28709,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qf_pVGZe5lgQGRHSp1q1p",
              "ctx": null,
              "_testId": "urn:uuid:85511f66-7f16-4ac1-943c-c6e9e2c1b79b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28678,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "GAL95XWdAatycUTQZ3YvO",
              "ctx": null,
              "_testId": "urn:uuid:7b61b2c7-c061-4750-be0c-3242b7d15177",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28710,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
          "cells": [
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qf_pVGZe5lgQGRHSp1q1p",
              "ctx": null,
              "_testId": "urn:uuid:9071f866-aee1-4664-acf1-8b76bec7e767",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28679,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "GAL95XWdAatycUTQZ3YvO",
              "ctx": null,
              "_testId": "urn:uuid:f3d1f7ed-ec36-48d7-af64-b9cfbb3140dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28710,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (ecdsa-sd-2023 verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:e427f016-0674-40ba-88e1-86c5bf03ba13",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28712,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:7538d957-9ab3-4337-a5d4-1b6d39253540",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:3ccb9a04-d1aa-44ba-960e-2d3b406f1437",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28898,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:2ff7c694-d156-4acc-b627-522634d48cad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:8b93d9bc-da89-4fb2-b4fe-2aa7cd2e3ec5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29089,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:584d0fcc-dcb9-40b7-8ec9-71c0bcc0b633",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29189,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:700b2a75-d516-4fff-b583-7e17e780a848",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29289,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:5e2d061f-bebe-48d2-a340-bcb678d47f17",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29382,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:72559ce4-4520-42e4-be53-0527f7b3ee82",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29480,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:406:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:93e2e531-ae27-4976-be36-507f1984de1f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29573,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:b08cc05b-c557-4472-8c7b-196de9cdfafb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29674,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:e65e040d-615e-406e-ad4b-13d5d20c75df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29771,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:437:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:08cfc0b4-f1ef-4d08-81ef-eea4f045a17e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29866,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:d49270ff-695d-4a84-9631-d52150ae4503",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29966,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:d18aec29-aca0-422d-bcef-e2fcff4f67af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30057,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "JGFSVIw35lW-kz6OJFup2",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:651a3861-3ce3-4e74-ba1f-fd87aa1f7ae1"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:b67d07b4-ec5f-4201-a2da-eee4a3265743",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:00f22a81-930c-486e-ba20-2bc4cc439d56",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30158,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 10,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:77c7e648-89ac-4fb3-bd8f-01ecd56d519c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:31a5724c-48ea-4ae5-801a-319039999ac0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30174,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:28fe3d97-546e-43ce-8c76-d217040feaf5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 8,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:4fa74290-c5ef-44e5-b140-9f1c6ace599f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30188,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:1b58313f-18e9-4ee3-845c-05d4badca0e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30194,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:6e1b15d5-39e3-4e42-92ac-8b0fce93d8a5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30200,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:41e54872-46a6-48d8-b724-fbdb822d8899",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30206,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:90e9362c-50f8-4e6b-9b2d-453d0ad6f5b6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30213,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:1efe2624-a3d7-4811-bf0f-a80e080fe724",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30218,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:b54407a8-4a30-4349-8039-40580766a705",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30225,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:0a579d31-1190-443b-b51e-c69febb9870c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30231,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:260e016d-5489-4935-86c4-1b913e1e5132",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30237,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:467fb8a9-e300-4a8d-aaa8-7360ab99c837",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "JGFSVIw35lW-kz6OJFup2",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:251d8ff0-a480-44ee-9f8d-f99a3451adde"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lvjmgZGODL3QiWlcH48Cg",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:0867c841-914d-4cb2-8b2e-43ece3d6e85d",
      "columns": [
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "If the \"proof\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:e427f016-0674-40ba-88e1-86c5bf03ba13",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28712,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:b67d07b4-ec5f-4201-a2da-eee4a3265743",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:7538d957-9ab3-4337-a5d4-1b6d39253540",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:00f22a81-930c-486e-ba20-2bc4cc439d56",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30158,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 10,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:3ccb9a04-d1aa-44ba-960e-2d3b406f1437",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28898,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:77c7e648-89ac-4fb3-bd8f-01ecd56d519c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:2ff7c694-d156-4acc-b627-522634d48cad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:31a5724c-48ea-4ae5-801a-319039999ac0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30174,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:8b93d9bc-da89-4fb2-b4fe-2aa7cd2e3ec5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29089,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:28fe3d97-546e-43ce-8c76-d217040feaf5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 8,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:584d0fcc-dcb9-40b7-8ec9-71c0bcc0b633",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29189,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:4fa74290-c5ef-44e5-b140-9f1c6ace599f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30188,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:700b2a75-d516-4fff-b583-7e17e780a848",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29289,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:1b58313f-18e9-4ee3-845c-05d4badca0e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30194,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:5e2d061f-bebe-48d2-a340-bcb678d47f17",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29382,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:6e1b15d5-39e3-4e42-92ac-8b0fce93d8a5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30200,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:72559ce4-4520-42e4-be53-0527f7b3ee82",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29480,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:406:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:41e54872-46a6-48d8-b724-fbdb822d8899",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30206,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:93e2e531-ae27-4976-be36-507f1984de1f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29573,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:90e9362c-50f8-4e6b-9b2d-453d0ad6f5b6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30213,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:b08cc05b-c557-4472-8c7b-196de9cdfafb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29674,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:1efe2624-a3d7-4811-bf0f-a80e080fe724",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30218,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.created\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:e65e040d-615e-406e-ad4b-13d5d20c75df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29771,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:437:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:b54407a8-4a30-4349-8039-40580766a705",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30225,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:08cfc0b4-f1ef-4d08-81ef-eea4f045a17e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29866,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:0a579d31-1190-443b-b51e-c69febb9870c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30231,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:d49270ff-695d-4a84-9631-d52150ae4503",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29966,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:260e016d-5489-4935-86c4-1b913e1e5132",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30237,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "NbH_LfLZFhEYKIn3YYJu_",
              "ctx": null,
              "_testId": "urn:uuid:d18aec29-aca0-422d-bcef-e2fcff4f67af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30057,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "FQGVdTfXCPouGbB_7GnvF",
              "ctx": null,
              "_testId": "urn:uuid:467fb8a9-e300-4a8d-aaa8-7360ab99c837",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:76098414-3c0f-49c5-be07-8c55bb928bd1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30388,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of nestedDisclosedCredentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:12d896dc-b496-415b-be63-f4f6b00e01b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30490,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedDlCredentialNoIds) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:16fda9d3-07c0-46ac-a0d2-1ba20f81799d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30592,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentialsWithFullArray) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:3836bf2b-76fa-4d58-afab-1ad502643e38",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30692,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(\n                const credential of disclosedCredentialsWithLessThanFullSubArray\n              ) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:5a53c202-d464-4f6e-899b-81d63d5e7148",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30804,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(\n                const credential of disclosedCredentialsWithoutFirstArrayElement\n              ) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:f380df98-7ff8-4a05-8b20-ddc42be87b7f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30910,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of disclosedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              // intentionally modify proofValue to not start with 'u'\n              signedCredentialCopy.proof.proofValue = 'a';\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:602e0966-9307-4e42-a69a-7bd0c3081ddb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31013,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of disclosedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              signedCredentialCopy.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:44426c48-5886-4f3d-821e-10b73abca752",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of signedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:223b30f0-5710-4e76-b887-ab5db4d308ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31197,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentials) {\n                const signedCredentialCopy = klona(credential);\n                // intentionally modify `credentialSubject` ID\n                signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n                await verificationFail({\n                  credential: signedCredentialCopy, verifier\n                });\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:a08d5cf2-65f9-4cbe-99e6-49331ee98a48",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31295,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "function() {\n            // filter vectors so suite doesn't test unsupported keyTypes\n            const getImplementationVectors = ({vectors}) =>\n              supportedEcdsaKeyTypes.map(type => vectors.get(type)).\n                filter(Boolean);\n            signedCredentials = getImplementationVectors({\n              vectors: testVectors.signed\n            });\n            disclosedCredentials = getImplementationVectors({\n              vectors: testVectors.disclosed.base\n            });\n            nestedDisclosedCredentials = getImplementationVectors({\n              vectors: testVectors.disclosed.nested\n            });\n            disclosedDlCredentialNoIds = getImplementationVectors({\n              vectors: testVectors.disclosed.noIds\n            });\n            disclosedCredentialsWithFullArray = getImplementationVectors({\n              vectors: testVectors.disclosed.array.full\n            });\n            disclosedCredentialsWithLessThanFullSubArray =\n              getImplementationVectors({\n                vectors: testVectors.disclosed.array.lessThanFull\n              });\n            disclosedCredentialsWithoutFirstArrayElement =\n              getImplementationVectors({\n                vectors: testVectors.disclosed.array.missingElements\n              });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Lh4xNEyRzzJxWAqggswEz",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:da1e4909-eae2-4b5a-a586-519764399481"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:de66acad-81f6-4c3b-9a7f-36becef9eba5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of nestedDisclosedCredentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:acc12830-a88d-43e4-91f3-ecd7dcdb16ef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedDlCredentialNoIds) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:1cc9f227-a0ce-4e1f-a2f9-d4c3cd64918a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentialsWithFullArray) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:53b4cf3f-40e0-42cc-8246-fb905397ec2f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31563,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 427,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(\n                const credential of disclosedCredentialsWithLessThanFullSubArray\n              ) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:db63a584-be23-4070-ad0f-5aa1b125253b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 323,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(\n                const credential of disclosedCredentialsWithoutFirstArrayElement\n              ) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:86d89c05-b37d-466d-87ca-6b20ce86d11c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32313,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 331,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of disclosedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              // intentionally modify proofValue to not start with 'u'\n              signedCredentialCopy.proof.proofValue = 'a';\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:034b0686-aa62-406c-b039-f644cc9589d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32645,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of disclosedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              signedCredentialCopy.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:05e9941a-da3a-4bb8-bb9e-bffc6a2528f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32651,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of signedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:771f59a8-fea5-499f-86b4-13198a2b2753",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32656,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentials) {\n                const signedCredentialCopy = klona(credential);\n                // intentionally modify `credentialSubject` ID\n                signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n                await verificationFail({\n                  credential: signedCredentialCopy, verifier\n                });\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:c8437375-1d8e-4702-8d35-8cd27a30185b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32661,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "function() {\n            // filter vectors so suite doesn't test unsupported keyTypes\n            const getImplementationVectors = ({vectors}) =>\n              supportedEcdsaKeyTypes.map(type => vectors.get(type)).\n                filter(Boolean);\n            signedCredentials = getImplementationVectors({\n              vectors: testVectors.signed\n            });\n            disclosedCredentials = getImplementationVectors({\n              vectors: testVectors.disclosed.base\n            });\n            nestedDisclosedCredentials = getImplementationVectors({\n              vectors: testVectors.disclosed.nested\n            });\n            disclosedDlCredentialNoIds = getImplementationVectors({\n              vectors: testVectors.disclosed.noIds\n            });\n            disclosedCredentialsWithFullArray = getImplementationVectors({\n              vectors: testVectors.disclosed.array.full\n            });\n            disclosedCredentialsWithLessThanFullSubArray =\n              getImplementationVectors({\n                vectors: testVectors.disclosed.array.lessThanFull\n              });\n            disclosedCredentialsWithoutFirstArrayElement =\n              getImplementationVectors({\n                vectors: testVectors.disclosed.array.missingElements\n              });\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Lh4xNEyRzzJxWAqggswEz",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:5b6649f8-2140-49c9-b576-070e51249cde"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (verifiers)\"",
          "body": "async function() {\n      const {subjectNestedObjects, subjectHasArrays} = credentials.verify;\n      // create initial signed VCs\n      testVectors.signed = await issueTestData({\n        credential: subjectNestedObjects.document,\n        suite,\n        keyTypes,\n        mandatoryPointers: subjectNestedObjects.mandatoryPointers\n      });\n      const signedVc = testVectors.signed.get(keyTypes[0]);\n      // use initial VCs for a basic selective disclosure test\n      testVectors.disclosed.base = await deriveTestData({\n        selectivePointers: ['/credentialSubject/id'],\n        verifiableCredential: signedVc,\n        keyTypes,\n        suite\n      });\n      // create initial nestedDisclosedCredential from signedVc\n      testVectors.disclosed.nested = await deriveTestData({\n        selectivePointers: subjectNestedObjects.selectivePointers.slice(1, 3),\n        verifiableCredential: signedVc,\n        keyTypes,\n        suite\n      });\n      // copy the first vc\n      const noIdVc = klona(subjectNestedObjects.document);\n      // delete the id\n      delete noIdVc.id;\n      // start second round test data creation w/ dlCredentialNoIds\n      const noIdsVcs = await issueTestData({\n        credential: noIdVc,\n        keyTypes,\n        suite: 'ecdsa-sd-2023',\n        mandatoryPointers: subjectNestedObjects.mandatoryPointers\n      });\n      const signedDlCredentialNoIds = noIdsVcs.get(keyTypes[0]);\n      testVectors.disclosed.noIds = await deriveTestData({\n        selectivePointers: subjectNestedObjects.selectivePointers.slice(1, 3),\n        verifiableCredential: signedDlCredentialNoIds,\n        keyTypes,\n        suite\n      });\n      const credentialHasArrays = klona(subjectHasArrays);\n      // start third round test data creation w/\n      // AchievementCredential\n      const achievementCredentials = await issueTestData({\n        credential: credentialHasArrays.document,\n        mandatoryPointers: credentialHasArrays.mandatoryPointers,\n        keyTypes,\n        suite\n      });\n      const signedAchievementCredential = achievementCredentials.get(\n        keyTypes[0]);\n      // select full arrays\n      testVectors.disclosed.array.full = await deriveTestData({\n        selectivePointers:\n          [...credentialHasArrays.selectivePointers],\n        verifiableCredential: signedAchievementCredential,\n        suite,\n        keyTypes\n      });\n      // select less than full subarrays\n      const lessThanFullPointers = credentialHasArrays.\n        selectivePointers.slice(2, -4);\n      testVectors.disclosed.array.lessThanFull = await deriveTestData({\n        selectivePointers: lessThanFullPointers,\n        verifiableCredential: signedAchievementCredential,\n        suite,\n        keyTypes\n      });\n      // select w/o first 7 array element\n      const removeFirst7Pointers = credentialHasArrays.\n        selectivePointers.slice(7);\n      testVectors.disclosed.array.missingElements = await deriveTestData({\n        selectivePointers: removeFirst7Pointers,\n        verifiableCredential: signedAchievementCredential,\n        suite,\n        keyTypes\n      });\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "Lh4xNEyRzzJxWAqggswEz",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 30249,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 136,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "-TeZbBNPQSaKSqtYNLQRd",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:012150f6-84ca-4183-9f0c-a3ca70db95c2",
      "columns": [
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:76098414-3c0f-49c5-be07-8c55bb928bd1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30388,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:de66acad-81f6-4c3b-9a7f-36becef9eba5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31396,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with nested disclosed properties.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of nestedDisclosedCredentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:12d896dc-b496-415b-be63-f4f6b00e01b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30490,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of nestedDisclosedCredentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:acc12830-a88d-43e4-91f3-ecd7dcdb16ef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with disclosed properties and bnodes.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedDlCredentialNoIds) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:16fda9d3-07c0-46ac-a0d2-1ba20f81799d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30592,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedDlCredentialNoIds) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:1cc9f227-a0ce-4e1f-a2f9-d4c3cd64918a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31491,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST verify with full array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentialsWithFullArray) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:3836bf2b-76fa-4d58-afab-1ad502643e38",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30692,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentialsWithFullArray) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:53b4cf3f-40e0-42cc-8246-fb905397ec2f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31563,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 427,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify with fewer array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(\n                const credential of disclosedCredentialsWithLessThanFullSubArray\n              ) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:5a53c202-d464-4f6e-899b-81d63d5e7148",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30804,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(\n                const credential of disclosedCredentialsWithLessThanFullSubArray\n              ) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:db63a584-be23-4070-ad0f-5aa1b125253b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 323,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify w/o first element revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(\n                const credential of disclosedCredentialsWithoutFirstArrayElement\n              ) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:f380df98-7ff8-4a05-8b20-ddc42be87b7f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30910,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(\n                const credential of disclosedCredentialsWithoutFirstArrayElement\n              ) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:86d89c05-b37d-466d-87ca-6b20ce86d11c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32313,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 331,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of disclosedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              // intentionally modify proofValue to not start with 'u'\n              signedCredentialCopy.proof.proofValue = 'a';\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:602e0966-9307-4e42-a69a-7bd0c3081ddb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31013,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of disclosedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              // intentionally modify proofValue to not start with 'u'\n              signedCredentialCopy.proof.proofValue = 'a';\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:034b0686-aa62-406c-b039-f644cc9589d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32645,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of disclosedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              signedCredentialCopy.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:44426c48-5886-4f3d-821e-10b73abca752",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of disclosedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              signedCredentialCopy.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:05e9941a-da3a-4bb8-bb9e-bffc6a2528f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32651,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST fail to verify a base proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of signedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:223b30f0-5710-4e76-b887-ab5db4d308ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31197,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of signedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:771f59a8-fea5-499f-86b4-13198a2b2753",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32656,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST fail to verify a modified disclosed credential.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentials) {\n                const signedCredentialCopy = klona(credential);\n                // intentionally modify `credentialSubject` ID\n                signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n                await verificationFail({\n                  credential: signedCredentialCopy, verifier\n                });\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "ssjEfSkXkpu3TLzhn_H4f",
              "ctx": null,
              "_testId": "urn:uuid:a08d5cf2-65f9-4cbe-99e6-49331ee98a48",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31295,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentials) {\n                const signedCredentialCopy = klona(credential);\n                // intentionally modify `credentialSubject` ID\n                signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n                await verificationFail({\n                  credential: signedCredentialCopy, verifier\n                });\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "tgFt7TCICoyOOcy5__wDb",
              "ctx": null,
              "_testId": "urn:uuid:c8437375-1d8e-4702-8d35-8cd27a30185b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32661,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n        const issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n          // mandatoryPointers: credentials.interop.mandatoryPointers\n        });\n        const {match: matchingVcHolders} = endpoints.filterByTag({\n          tags: ['vcHolder'],\n          property: 'vcHolders'\n        });\n        // Uses 'Digital Bazaar' as default VC holder to create disclosed\n        // credentials for the tests.\n        const vcHolders = matchingVcHolders.get(holderName).endpoints;\n        const vcHolder = vcHolders[0];\n        ({disclosedCredential} = await createDisclosedVc({\n          selectivePointers: ['/credentialSubject/id'],\n          signedCredential: issuedVc,\n          vcHolder\n        }));\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "PSKiuqBd-30KU5EknmTZD",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 32687,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 576,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n        const issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n          // mandatoryPointers: credentials.interop.mandatoryPointers\n        });\n        const {match: matchingVcHolders} = endpoints.filterByTag({\n          tags: ['vcHolder'],\n          property: 'vcHolders'\n        });\n        // Uses 'Digital Bazaar' as default VC holder to create disclosed\n        // credentials for the tests.\n        const vcHolders = matchingVcHolders.get(holderName).endpoints;\n        const vcHolder = vcHolders[0];\n        ({disclosedCredential} = await createDisclosedVc({\n          selectivePointers: ['/credentialSubject/id'],\n          signedCredential: issuedVc,\n          vcHolder\n        }));\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "PSKiuqBd-30KU5EknmTZD",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 33263,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 251,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n        const issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n          // mandatoryPointers: credentials.interop.mandatoryPointers\n        });\n        const {match: matchingVcHolders} = endpoints.filterByTag({\n          tags: ['vcHolder'],\n          property: 'vcHolders'\n        });\n        // Uses 'Digital Bazaar' as default VC holder to create disclosed\n        // credentials for the tests.\n        const vcHolders = matchingVcHolders.get(holderName).endpoints;\n        const vcHolder = vcHolders[0];\n        ({disclosedCredential} = await createDisclosedVc({\n          selectivePointers: ['/credentialSubject/id'],\n          signedCredential: issuedVc,\n          vcHolder\n        }));\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "PSKiuqBd-30KU5EknmTZD",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 33514,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 109,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n        const issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n          // mandatoryPointers: credentials.interop.mandatoryPointers\n        });\n        const {match: matchingVcHolders} = endpoints.filterByTag({\n          tags: ['vcHolder'],\n          property: 'vcHolders'\n        });\n        // Uses 'Digital Bazaar' as default VC holder to create disclosed\n        // credentials for the tests.\n        const vcHolders = matchingVcHolders.get(holderName).endpoints;\n        const vcHolder = vcHolders[0];\n        ({disclosedCredential} = await createDisclosedVc({\n          selectivePointers: ['/credentialSubject/id'],\n          signedCredential: issuedVc,\n          vcHolder\n        }));\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "PSKiuqBd-30KU5EknmTZD",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 33623,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 110,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lvjmgZGODL3QiWlcH48Cg",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:cbb817f5-e7dd-4a31-8ed5-fc56929fa976",
      "columns": [
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "Digital Bazaar: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            disclosedCredential,\n            `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n          );\n          await verificationSuccess({\n            credential: disclosedCredential, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "PSKiuqBd-30KU5EknmTZD",
              "ctx": null,
              "_testId": "urn:uuid:49b4150a-94be-4f2d-8e39-3d79f30ae1de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "Digital Bazaar: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33733,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Grotto Networking: P-256\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            disclosedCredential,\n            `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n          );\n          await verificationSuccess({\n            credential: disclosedCredential, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "PSKiuqBd-30KU5EknmTZD",
              "ctx": null,
              "_testId": "urn:uuid:79f3a31b-f963-47f3-a8ad-41d48e863416",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "Grotto Networking: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33832,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Grotto Networking: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256\" should verify \"Grotto Networking: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            disclosedCredential,\n            `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n          );\n          await verificationSuccess({\n            credential: disclosedCredential, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "PSKiuqBd-30KU5EknmTZD",
              "ctx": null,
              "_testId": "urn:uuid:760214cd-6721-45c9-b349-d9aa4fe4bd9e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking: P-256",
                "columnId": "Digital Bazaar: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33856,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer Grotto Networking: P-256 to issue a disclosed VC.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer Grotto Networking: P-256 to issue a disclosed VC.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js:109:18)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"Grotto Networking: P-256\" should verify \"Grotto Networking: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            disclosedCredential,\n            `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n          );\n          await verificationSuccess({\n            credential: disclosedCredential, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "PSKiuqBd-30KU5EknmTZD",
              "ctx": null,
              "_testId": "urn:uuid:b644018a-c9e0-4e26-ad53-08cc6f7eb830",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking: P-256",
                "columnId": "Grotto Networking: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33856,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer Grotto Networking: P-256 to issue a disclosed VC.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer Grotto Networking: P-256 to issue a disclosed VC.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js:109:18)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "base",
    "shortName": "vc-di-ecdsa-test-suite",
    "subtitle": "Interoperability test suite for ECDSA Data Integrity cryptosuites.",
    "github": "https://github.com/w3c-ccg/vc-di-ecdsa-test-suite",
    "edDraftURI": "https://w3c-ccg.github.io/vc-di-ecdsa-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "http://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/ "
      }
    ]
  },
  "title": "Data Integrity ecdsa 2019 Interoperability Report 1.0",
  "stats": [
    "Tests passed 267/294 90%",
    "Tests failed 29/294 10%",
    "Failures 29",
    "Tests skipped 0",
    "Total tests 294"
  ]
}