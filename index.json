{
  "matrices": [
    {
      "title": "Data Integrity (ecdsa-rdfc-2019 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:7c4be68f-7f30-49a4-9acd-a59188baf8cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:51146b03-9b28-4f61-b7ff-2bd95aef3b36",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:e070ecb3-2eb4-4d1d-bb5f-b3b4900d1ca1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:367e1618-9c7a-41b7-90fd-cf925fa33b88",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:268e93b6-6917-4167-9ed8-9cce1669b923",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:2dee8460-ad1d-4401-a529-9efc33beaeca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:87c1d6c4-3a79-4297-800a-db30ab53f182",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:d0e1e9dd-63a6-43a2-90f2-6bb667a770ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:37f4394b-f185-4b02-a46b-3f573a5914d2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:924a961b-88b6-40bb-9073-8e2665d0d501",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:b7aeecb8-462f-473b-9343-b1ac66e3b345",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:09477aef-c9f7-42fa-bd66-46bf4ae3f181",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:edc94384-f308-4b0f-acf9-f3937c246b87",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:365ab1e9-f4bc-42fa-b578-af9f294e315a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:25d37e2c-f6b9-444a-8906-1479a924c1df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 532,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 865,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SIRuBCPTNAMjmHX0hiCWS",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:47094314-4097-4e1e-a804-b7c83e1bb9a1"
        },
        {
          "title": "apicatalog.com: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:7d8cd6b5-61db-44c3-ae3c-f278fbdaf889",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:15d64720-231b-45af-b3d3-c1deddfda2b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:f527d174-f416-4761-bf47-678122a2e2e0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:9c9f646a-0c9e-4fdd-acc6-5e8eb0ad758a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:18eda7b7-3484-47c9-954e-c1f47a992289",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:80339e13-1b88-4826-8b46-8854850345df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:1baaf8df-016e-4913-84e8-d27d2af457fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:11d5d879-ef96-4d52-b822-7199061654a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:6b9e5284-01ec-4dbc-af24-adacadd70e6a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:a27f3186-01ea-4558-ba7d-b323acabf8f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:f9d000cc-592b-4558-b205-d88630ef90da",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:be21e49d-3ca1-4908-ac08-3ee76110f492",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:bdfa45c3-a5c2-4513-ace5-7e71e06ab38a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:6c99c42c-7088-4080-ace8-ce68c0ac1ae9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:260d9b01-d369-48d6-aea2-fb73dd3bcb85",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-384\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1406,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 261,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SIRuBCPTNAMjmHX0hiCWS",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:2ec434b4-2c89-4496-9ffe-91a467f69517"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:bf9fe33d-fc04-47bb-bf57-b4471bb6eefc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:59359c82-bd92-4108-ab80-b3048dc050c2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:c05ef3fb-dfcd-4ccc-811a-1f5c37d25188",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:52dbf6fd-c729-4f78-a6c2-5328b311eae1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:918c2642-5623-43b2-875d-86d584d371b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:cf5bc1bc-4048-4c7f-93d1-9dc938ba3928",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:81aa001a-9a00-42fd-bc1f-406436b746e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:403b390a-ed68-47bb-a0bc-6341f0fa0de1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:91052f79-2745-404c-b647-4210d7cb5aa3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:a4abae80-ce81-4072-95f8-48f9b1df0da2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:b006eff0-4e4d-47e3-bdb6-5ca679556c4e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:bde3e9fc-5ce4-497f-bae1-4499dcb8cee0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:e81d4f71-8753-4263-a0b5-3c68f097ce7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:8f493230-d0d6-48be-bc01-8a0dac988c9b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:dadd8b0a-c13d-4683-8561-571475eafd3a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1672,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 538,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SIRuBCPTNAMjmHX0hiCWS",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:230d8218-4060-4243-929e-19c65ebb3301"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:63e17832-a116-4d37-a970-2ba8bd404471",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:30d39572-377e-497c-99e0-4babe5e408b6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:ffa42963-67c8-46f5-a853-39863d234401",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:5e0cae78-a64a-498d-b0c9-7ee18868df6d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:10fce0ec-64f3-423b-959d-e67327481153",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:23410869-5441-488f-80f4-4cb1a3a62b43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:eb5bffd3-395c-418e-af92-8b0dc548b4ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:13f6786f-ceca-4e90-8cdf-db59b244bb48",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:d7db7aa7-62fe-4a00-9861-613c289d0249",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:19e28426-7e4b-4720-a699-41aa2dfd0170",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:793dd986-a4ca-4212-b12b-28be2715f46b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:8a2225b7-7f68-49cd-80be-bc9b1b9a98a9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:b2e4bd09-a02f-43bd-809d-67ee1ff553b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:6ce2fc8f-fe42-4bfd-9e26-f73023bf6f40",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:00096ffa-5d63-48d4-9ef1-866c0a042b3b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-384\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2213,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 428,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SIRuBCPTNAMjmHX0hiCWS",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:29d91162-2a2e-4b16-9bc3-053e09d43aa5"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:4f4e0e39-86b0-446b-af1b-b8afae1e285c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:3cc81e0d-eb7e-4d23-b1f5-2724e1b2a0ee",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:cc8c294a-0e23-422e-b91c-9c2e73692b33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:00f70b36-5101-4a00-83da-0175a4df2ca5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:145:38)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:517c755b-04bd-48f7-bd18-692837732bd7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:8410eb17-3508-451a-8107-5f546fb11e82",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:58b44e4d-5913-4c73-b4f9-f8037fcf193d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:a6c366dd-4bdc-4e6c-9a8d-2e5c6aa0a60b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:078a6634-59a5-4a2e-b33c-aa5faa7ce9dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:9c6c4388-11b1-43f4-b017-0bb66271d428",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:063c1979-d7da-4336-89a9-26ff300c21ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:a6c03b49-c255-4c8a-accf-3c8a826611b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:aae67393-20c8-47f8-bee0-f601c8925ba8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:05023dee-f80e-4365-a5dd-fe9106c058b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:e8937627-33e5-4d21-b913-4fe658f9e888",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2649,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 337,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SIRuBCPTNAMjmHX0hiCWS",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:56fadbee-09dd-4008-849d-0aa6c27a686e"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:80a4d1c4-7648-42bd-9540-3536df4434e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:24a40bc3-0cf0-4d79-b317-f42150722d0f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:dcd6676a-2f2a-47f2-bd41-d70c9fbcdd7f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:20f951b3-272c-48cc-ba1a-c1b8efdc97e9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:7bd31adf-564b-433c-b1c1-41de478faa96",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:26175c1c-902d-460e-8db5-95077b110e6d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:44b156a3-93f7-4031-905a-d28c791c1b20",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:274ab435-f9ef-4647-9597-f7aba7ea63b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:074ca8be-2661-484c-b626-0fa34bbfc909",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:63c9f543-84fc-462e-abb4-7a2239bd4ff1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:fb1be9c2-fbfe-4c3f-b346-1c3a0bf286b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:77da6e87-733c-43e8-990d-69f8be175ac6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:e2472852-352a-4f70-9de8-d659e28508d3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:4a54c5cb-4e6f-4ada-9335-10043feb2e2a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:c97ae1b7-86b0-4214-810a-025cd7b51cbe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2992,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 666,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "SIRuBCPTNAMjmHX0hiCWS",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
          "_testId": "urn:uuid:0405b6c5-cbb5-47d2-8238-256cc73ebabb"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "hTD6kIfIUVCBr-jsDUUph",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:c564fa12-bb59-415f-9274-22957fbd1e86",
      "columns": [
        "apicatalog.com: P-256",
        "apicatalog.com: P-384",
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:7c4be68f-7f30-49a4-9acd-a59188baf8cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:7d8cd6b5-61db-44c3-ae3c-f278fbdaf889",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:bf9fe33d-fc04-47bb-bf57-b4471bb6eefc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:63e17832-a116-4d37-a970-2ba8bd404471",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:4f4e0e39-86b0-446b-af1b-b8afae1e285c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:80a4d1c4-7648-42bd-9540-3536df4434e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.id\" field exists, it MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:51146b03-9b28-4f61-b7ff-2bd95aef3b36",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:15d64720-231b-45af-b3d3-c1deddfda2b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:59359c82-bd92-4108-ab80-b3048dc050c2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:30d39572-377e-497c-99e0-4babe5e408b6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:3cc81e0d-eb7e-4d23-b1f5-2724e1b2a0ee",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:24a40bc3-0cf0-4d79-b317-f42150722d0f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:e070ecb3-2eb4-4d1d-bb5f-b3b4900d1ca1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:f527d174-f416-4761-bf47-678122a2e2e0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:c05ef3fb-dfcd-4ccc-811a-1f5c37d25188",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:ffa42963-67c8-46f5-a853-39863d234401",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:cc8c294a-0e23-422e-b91c-9c2e73692b33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:dcd6676a-2f2a-47f2-bd41-d70c9fbcdd7f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:367e1618-9c7a-41b7-90fd-cf925fa33b88",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:9c9f646a-0c9e-4fdd-acc6-5e8eb0ad758a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:52dbf6fd-c729-4f78-a6c2-5328b311eae1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:5e0cae78-a64a-498d-b0c9-7ee18868df6d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:00f70b36-5101-4a00-83da-0175a4df2ca5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:145:38)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:20f951b3-272c-48cc-ba1a-c1b8efdc97e9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.cryptosuite\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:268e93b6-6917-4167-9ed8-9cce1669b923",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:18eda7b7-3484-47c9-954e-c1f47a992289",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:918c2642-5623-43b2-875d-86d584d371b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:10fce0ec-64f3-423b-959d-e67327481153",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:517c755b-04bd-48f7-bd18-692837732bd7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:7bd31adf-564b-433c-b1c1-41de478faa96",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:2dee8460-ad1d-4401-a529-9efc33beaeca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:80339e13-1b88-4826-8b46-8854850345df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:cf5bc1bc-4048-4c7f-93d1-9dc938ba3928",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:23410869-5441-488f-80f4-4cb1a3a62b43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:8410eb17-3508-451a-8107-5f546fb11e82",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:26175c1c-902d-460e-8db5-95077b110e6d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:87c1d6c4-3a79-4297-800a-db30ab53f182",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:1baaf8df-016e-4913-84e8-d27d2af457fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:81aa001a-9a00-42fd-bc1f-406436b746e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:eb5bffd3-395c-418e-af92-8b0dc548b4ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:58b44e4d-5913-4c73-b4f9-f8037fcf193d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:44b156a3-93f7-4031-905a-d28c791c1b20",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:d0e1e9dd-63a6-43a2-90f2-6bb667a770ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:11d5d879-ef96-4d52-b822-7199061654a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:403b390a-ed68-47bb-a0bc-6341f0fa0de1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:13f6786f-ceca-4e90-8cdf-db59b244bb48",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:a6c366dd-4bdc-4e6c-9a8d-2e5c6aa0a60b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:274ab435-f9ef-4647-9597-f7aba7ea63b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofPurpose\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:37f4394b-f185-4b02-a46b-3f573a5914d2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:6b9e5284-01ec-4dbc-af24-adacadd70e6a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:91052f79-2745-404c-b647-4210d7cb5aa3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:d7db7aa7-62fe-4a00-9861-613c289d0249",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:078a6634-59a5-4a2e-b33c-aa5faa7ce9dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:074ca8be-2661-484c-b626-0fa34bbfc909",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofValue\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:924a961b-88b6-40bb-9073-8e2665d0d501",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:a27f3186-01ea-4558-ba7d-b323acabf8f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:a4abae80-ce81-4072-95f8-48f9b1df0da2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:19e28426-7e4b-4720-a699-41aa2dfd0170",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:9c6c4388-11b1-43f4-b017-0bb66271d428",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:63c9f543-84fc-462e-abb4-7a2239bd4ff1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:b7aeecb8-462f-473b-9343-b1ac66e3b345",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:f9d000cc-592b-4558-b205-d88630ef90da",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:b006eff0-4e4d-47e3-bdb6-5ca679556c4e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:793dd986-a4ca-4212-b12b-28be2715f46b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:063c1979-d7da-4336-89a9-26ff300c21ce",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:fb1be9c2-fbfe-4c3f-b346-1c3a0bf286b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:09477aef-c9f7-42fa-bd66-46bf4ae3f181",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:be21e49d-3ca1-4908-ac08-3ee76110f492",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:bde3e9fc-5ce4-497f-bae1-4499dcb8cee0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:8a2225b7-7f68-49cd-80be-bc9b1b9a98a9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:a6c03b49-c255-4c8a-accf-3c8a826611b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:77da6e87-733c-43e8-990d-69f8be175ac6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.challenge\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:edc94384-f308-4b0f-acf9-f3937c246b87",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:bdfa45c3-a5c2-4513-ace5-7e71e06ab38a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:e81d4f71-8753-4263-a0b5-3c68f097ce7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:b2e4bd09-a02f-43bd-809d-67ee1ff553b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:aae67393-20c8-47f8-bee0-f601c8925ba8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:e2472852-352a-4f70-9de8-d659e28508d3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:365ab1e9-f4bc-42fa-b578-af9f294e315a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:6c99c42c-7088-4080-ace8-ce68c0ac1ae9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:8f493230-d0d6-48be-bc01-8a0dac988c9b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:6ce2fc8f-fe42-4bfd-9e26-f73023bf6f40",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:05023dee-f80e-4365-a5dd-fe9106c058b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:4a54c5cb-4e6f-4ada-9335-10043feb2e2a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "72021KhNMj3KgkQ_uw66o",
              "ctx": null,
              "_testId": "urn:uuid:25d37e2c-f6b9-444a-8906-1479a924c1df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "sJ3Dfts_mMmjpM8NJr5Df",
              "ctx": null,
              "_testId": "urn:uuid:260d9b01-d369-48d6-aea2-fb73dd3bcb85",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "_XlRgsWhM5ndiAHLk-cR0",
              "ctx": null,
              "_testId": "urn:uuid:dadd8b0a-c13d-4683-8561-571475eafd3a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "Cn9pd3PPxq0bVakw2ePxK",
              "ctx": null,
              "_testId": "urn:uuid:00096ffa-5d63-48d4-9ef1-866c0a042b3b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "jT-rKWdlwTHpi8iLcUWv2",
              "ctx": null,
              "_testId": "urn:uuid:e8937627-33e5-4d21-b913-4fe658f9e888",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/05-rdfc-di-create.js",
              "parent": "zQlfShGZWxxAOQg1Wy_lY",
              "ctx": null,
              "_testId": "urn:uuid:c97ae1b7-86b0-4214-810a-025cd7b51cbe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1nro89jojLkL3dTnePiPd",
              "ctx": null,
              "_testId": "urn:uuid:bec465b0-8c1d-40c7-bca3-09a618d3b5b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1nro89jojLkL3dTnePiPd",
              "ctx": null,
              "_testId": "urn:uuid:63d42d6b-b403-449e-8c48-5183d33b07d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3971,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1nro89jojLkL3dTnePiPd",
              "ctx": null,
              "_testId": "urn:uuid:2f0c2f0c-27ca-4c6f-8c7f-2b33dd1a05eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1nro89jojLkL3dTnePiPd",
              "ctx": null,
              "_testId": "urn:uuid:3c14a221-53ef-41dd-b1d4-6ac78378a11d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3973,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1nro89jojLkL3dTnePiPd",
              "ctx": null,
              "_testId": "urn:uuid:12d4ff6b-adfb-4f92-ad5d-89ddf05122f7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3973,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256\"",
              "body": "async function() {\n              issuedVc = await createInitialVc({\n                issuer,\n                vc: credentials.create.document\n              });\n              // VCs can have multiple proofs so account for that\n              proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                [issuedVc?.proof];\n              const verificationMethods = proofs.map(\n                proof => proof.verificationMethod);\n              for(const verificationMethod of verificationMethods) {\n                const verificationMethodDocument = await documentLoader({\n                  url: verificationMethod\n                });\n                verificationMethodDocuments.push(verificationMethodDocument);\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "1nro89jojLkL3dTnePiPd",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3662,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 308,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LPFgI6fnjdqZMmjWlyWY2",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:c91dc042-5baa-4188-ba09-748c547af9bf"
        },
        {
          "title": "apicatalog.com: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vYQFEnBgalWGAyl1fwzAP",
              "ctx": null,
              "_testId": "urn:uuid:2486bab6-779c-4546-aa58-815eb9ca6537",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vYQFEnBgalWGAyl1fwzAP",
              "ctx": null,
              "_testId": "urn:uuid:3f733fb8-ba2b-4f91-9816-6df8d0ca761c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4274,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vYQFEnBgalWGAyl1fwzAP",
              "ctx": null,
              "_testId": "urn:uuid:8d9c7f6f-ac4a-48ba-a808-29ba2077c4ec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4275,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vYQFEnBgalWGAyl1fwzAP",
              "ctx": null,
              "_testId": "urn:uuid:57476271-9017-4368-96fb-53ae18891523",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vYQFEnBgalWGAyl1fwzAP",
              "ctx": null,
              "_testId": "urn:uuid:9262a565-ac08-459c-b54d-1f8f5a62c3a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-384\"",
              "body": "async function() {\n              issuedVc = await createInitialVc({\n                issuer,\n                vc: credentials.create.document\n              });\n              // VCs can have multiple proofs so account for that\n              proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                [issuedVc?.proof];\n              const verificationMethods = proofs.map(\n                proof => proof.verificationMethod);\n              for(const verificationMethod of verificationMethods) {\n                const verificationMethodDocument = await documentLoader({\n                  url: verificationMethod\n                });\n                verificationMethodDocuments.push(verificationMethodDocument);\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "vYQFEnBgalWGAyl1fwzAP",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3974,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 300,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LPFgI6fnjdqZMmjWlyWY2",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:84d2f962-ee3e-4a10-832b-71cfb8f4795c"
        },
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "xM78UtK8cFOg7wDRYaJ70",
              "ctx": null,
              "_testId": "urn:uuid:fc6e5e06-9ea4-4257-825a-1c0069f18030",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "xM78UtK8cFOg7wDRYaJ70",
              "ctx": null,
              "_testId": "urn:uuid:b0f6869d-a539-4e8a-a37e-c676c2336d9a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4424,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "xM78UtK8cFOg7wDRYaJ70",
              "ctx": null,
              "_testId": "urn:uuid:5b6e539a-a6cb-4bf6-a7aa-4b88aa5283df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "xM78UtK8cFOg7wDRYaJ70",
              "ctx": null,
              "_testId": "urn:uuid:31439b6d-32c9-46d1-b43c-0b2769d50bd9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4426,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "xM78UtK8cFOg7wDRYaJ70",
              "ctx": null,
              "_testId": "urn:uuid:ebebc9b4-06c7-45cd-852b-a119e93641ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4426,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n              issuedVc = await createInitialVc({\n                issuer,\n                vc: credentials.create.document\n              });\n              // VCs can have multiple proofs so account for that\n              proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                [issuedVc?.proof];\n              const verificationMethods = proofs.map(\n                proof => proof.verificationMethod);\n              for(const verificationMethod of verificationMethods) {\n                const verificationMethodDocument = await documentLoader({\n                  url: verificationMethod\n                });\n                verificationMethodDocuments.push(verificationMethodDocument);\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xM78UtK8cFOg7wDRYaJ70",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 148,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LPFgI6fnjdqZMmjWlyWY2",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:ba1a3516-4f51-46a1-bfcc-64ea6c9f2862"
        },
        {
          "title": "Digital Bazaar: P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_Yuw7orbhVqRcMqO-WMTK",
              "ctx": null,
              "_testId": "urn:uuid:10aa1817-805b-4948-a5ec-db775201ebb1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_Yuw7orbhVqRcMqO-WMTK",
              "ctx": null,
              "_testId": "urn:uuid:9593fcf0-9bc2-4ef8-acc9-fd9a4c53f9ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4738,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_Yuw7orbhVqRcMqO-WMTK",
              "ctx": null,
              "_testId": "urn:uuid:21a782a0-9aa1-4eff-a850-89f463acdd45",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4738,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_Yuw7orbhVqRcMqO-WMTK",
              "ctx": null,
              "_testId": "urn:uuid:8e54a8e8-d8e6-4e72-90f6-22aeac0619cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_Yuw7orbhVqRcMqO-WMTK",
              "ctx": null,
              "_testId": "urn:uuid:fe5c5be1-c57a-4bf6-8cd5-39c446a049de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-384\"",
              "body": "async function() {\n              issuedVc = await createInitialVc({\n                issuer,\n                vc: credentials.create.document\n              });\n              // VCs can have multiple proofs so account for that\n              proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                [issuedVc?.proof];\n              const verificationMethods = proofs.map(\n                proof => proof.verificationMethod);\n              for(const verificationMethod of verificationMethods) {\n                const verificationMethodDocument = await documentLoader({\n                  url: verificationMethod\n                });\n                verificationMethodDocuments.push(verificationMethodDocument);\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_Yuw7orbhVqRcMqO-WMTK",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4427,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 310,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LPFgI6fnjdqZMmjWlyWY2",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:6e2818a7-3c61-4680-b303-dda501175a00"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "ZM84OsMaOQePofQsS5Si6",
              "ctx": null,
              "_testId": "urn:uuid:ae2ed7a0-d5d3-4be3-b706-4dead4850e76",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "stack": "AssertionError: Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:70:24)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "ZM84OsMaOQePofQsS5Si6",
              "ctx": null,
              "_testId": "urn:uuid:8e3f4c3f-05da-4b6a-93ee-800524fd293a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4838,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "ZM84OsMaOQePofQsS5Si6",
              "ctx": null,
              "_testId": "urn:uuid:3ba65b91-d520-4a89-998c-c4c03c412a30",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4838,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "ZM84OsMaOQePofQsS5Si6",
              "ctx": null,
              "_testId": "urn:uuid:5c478c82-a86d-425c-8d2e-2b4a17f55663",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4839,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "ZM84OsMaOQePofQsS5Si6",
              "ctx": null,
              "_testId": "urn:uuid:2e61e12b-acb2-440e-9ea1-087fe46e06ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4839,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID: P-256\"",
              "body": "async function() {\n              issuedVc = await createInitialVc({\n                issuer,\n                vc: credentials.create.document\n              });\n              // VCs can have multiple proofs so account for that\n              proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                [issuedVc?.proof];\n              const verificationMethods = proofs.map(\n                proof => proof.verificationMethod);\n              for(const verificationMethod of verificationMethods) {\n                const verificationMethodDocument = await documentLoader({\n                  url: verificationMethod\n                });\n                verificationMethodDocuments.push(verificationMethodDocument);\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ZM84OsMaOQePofQsS5Si6",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LPFgI6fnjdqZMmjWlyWY2",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:58873cf1-87cc-4d7b-9abd-00960ea3c51c"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "O5GdBT6h82EA31T2okD1t",
              "ctx": null,
              "_testId": "urn:uuid:e7294ec8-58e4-48f2-b238-b905612c41ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "O5GdBT6h82EA31T2okD1t",
              "ctx": null,
              "_testId": "urn:uuid:f4d999fb-8011-4932-af09-5cbe0a266b8a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5018,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "O5GdBT6h82EA31T2okD1t",
              "ctx": null,
              "_testId": "urn:uuid:336afd9c-bda6-4491-bfec-6b39801a0cb7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5019,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "O5GdBT6h82EA31T2okD1t",
              "ctx": null,
              "_testId": "urn:uuid:2d1b8e00-0e07-48ba-9e46-20a6027afe87",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5020,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "O5GdBT6h82EA31T2okD1t",
              "ctx": null,
              "_testId": "urn:uuid:d317ab9f-729a-43fb-8ee0-d92ee9651b7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5020,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine: P-256\"",
              "body": "async function() {\n              issuedVc = await createInitialVc({\n                issuer,\n                vc: credentials.create.document\n              });\n              // VCs can have multiple proofs so account for that\n              proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                [issuedVc?.proof];\n              const verificationMethods = proofs.map(\n                proof => proof.verificationMethod);\n              for(const verificationMethod of verificationMethods) {\n                const verificationMethodDocument = await documentLoader({\n                  url: verificationMethod\n                });\n                verificationMethodDocuments.push(verificationMethodDocument);\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "O5GdBT6h82EA31T2okD1t",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4840,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 178,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LPFgI6fnjdqZMmjWlyWY2",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:fa56c010-c028-41a2-97c3-ba4b028e9577"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "-XoRbeha7s926PD85pOBi",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:1c892fd2-36dc-4c6e-933c-63fee4132634",
      "columns": [
        "apicatalog.com: P-256",
        "apicatalog.com: P-384",
        "Digital Bazaar: P-256",
        "Digital Bazaar: P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1nro89jojLkL3dTnePiPd",
              "ctx": null,
              "_testId": "urn:uuid:bec465b0-8c1d-40c7-bca3-09a618d3b5b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vYQFEnBgalWGAyl1fwzAP",
              "ctx": null,
              "_testId": "urn:uuid:2486bab6-779c-4546-aa58-815eb9ca6537",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "xM78UtK8cFOg7wDRYaJ70",
              "ctx": null,
              "_testId": "urn:uuid:fc6e5e06-9ea4-4257-825a-1c0069f18030",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_Yuw7orbhVqRcMqO-WMTK",
              "ctx": null,
              "_testId": "urn:uuid:10aa1817-805b-4948-a5ec-db775201ebb1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "ZM84OsMaOQePofQsS5Si6",
              "ctx": null,
              "_testId": "urn:uuid:ae2ed7a0-d5d3-4be3-b706-4dead4850e76",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "stack": "AssertionError: Expected at least one proof to have \"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js:70:24)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              const cryptosuite = ['ecdsa-rdfc-2019', 'ecdsa-jcs-2019'];\n              proofs.some(\n                proof => cryptosuite.includes(proof?.cryptosuite)\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "O5GdBT6h82EA31T2okD1t",
              "ctx": null,
              "_testId": "urn:uuid:e7294ec8-58e4-48f2-b238-b905612c41ca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1nro89jojLkL3dTnePiPd",
              "ctx": null,
              "_testId": "urn:uuid:63d42d6b-b403-449e-8c48-5183d33b07d8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3971,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vYQFEnBgalWGAyl1fwzAP",
              "ctx": null,
              "_testId": "urn:uuid:3f733fb8-ba2b-4f91-9816-6df8d0ca761c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4274,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "xM78UtK8cFOg7wDRYaJ70",
              "ctx": null,
              "_testId": "urn:uuid:b0f6869d-a539-4e8a-a37e-c676c2336d9a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4424,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_Yuw7orbhVqRcMqO-WMTK",
              "ctx": null,
              "_testId": "urn:uuid:9593fcf0-9bc2-4ef8-acc9-fd9a4c53f9ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4738,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "ZM84OsMaOQePofQsS5Si6",
              "ctx": null,
              "_testId": "urn:uuid:8e3f4c3f-05da-4b6a-93ee-800524fd293a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4838,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "O5GdBT6h82EA31T2okD1t",
              "ctx": null,
              "_testId": "urn:uuid:f4d999fb-8011-4932-af09-5cbe0a266b8a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5018,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1nro89jojLkL3dTnePiPd",
              "ctx": null,
              "_testId": "urn:uuid:2f0c2f0c-27ca-4c6f-8c7f-2b33dd1a05eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vYQFEnBgalWGAyl1fwzAP",
              "ctx": null,
              "_testId": "urn:uuid:8d9c7f6f-ac4a-48ba-a808-29ba2077c4ec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4275,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "xM78UtK8cFOg7wDRYaJ70",
              "ctx": null,
              "_testId": "urn:uuid:5b6e539a-a6cb-4bf6-a7aa-4b88aa5283df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_Yuw7orbhVqRcMqO-WMTK",
              "ctx": null,
              "_testId": "urn:uuid:21a782a0-9aa1-4eff-a850-89f463acdd45",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4738,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "ZM84OsMaOQePofQsS5Si6",
              "ctx": null,
              "_testId": "urn:uuid:3ba65b91-d520-4a89-998c-c4c03c412a30",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4838,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "O5GdBT6h82EA31T2okD1t",
              "ctx": null,
              "_testId": "urn:uuid:336afd9c-bda6-4491-bfec-6b39801a0cb7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5019,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1nro89jojLkL3dTnePiPd",
              "ctx": null,
              "_testId": "urn:uuid:3c14a221-53ef-41dd-b1d4-6ac78378a11d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3973,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vYQFEnBgalWGAyl1fwzAP",
              "ctx": null,
              "_testId": "urn:uuid:57476271-9017-4368-96fb-53ae18891523",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "xM78UtK8cFOg7wDRYaJ70",
              "ctx": null,
              "_testId": "urn:uuid:31439b6d-32c9-46d1-b43c-0b2769d50bd9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4426,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_Yuw7orbhVqRcMqO-WMTK",
              "ctx": null,
              "_testId": "urn:uuid:8e54a8e8-d8e6-4e72-90f6-22aeac0619cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "ZM84OsMaOQePofQsS5Si6",
              "ctx": null,
              "_testId": "urn:uuid:5c478c82-a86d-425c-8d2e-2b4a17f55663",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4839,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "O5GdBT6h82EA31T2okD1t",
              "ctx": null,
              "_testId": "urn:uuid:2d1b8e00-0e07-48ba-9e46-20a6027afe87",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5020,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
          "cells": [
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1nro89jojLkL3dTnePiPd",
              "ctx": null,
              "_testId": "urn:uuid:12d4ff6b-adfb-4f92-ad5d-89ddf05122f7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3973,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "vYQFEnBgalWGAyl1fwzAP",
              "ctx": null,
              "_testId": "urn:uuid:9262a565-ac08-459c-b54d-1f8f5a62c3a0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "xM78UtK8cFOg7wDRYaJ70",
              "ctx": null,
              "_testId": "urn:uuid:ebebc9b4-06c7-45cd-852b-a119e93641ab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4426,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "_Yuw7orbhVqRcMqO-WMTK",
              "ctx": null,
              "_testId": "urn:uuid:fe5c5be1-c57a-4bf6-8cd5-39c446a049de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-384",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "ZM84OsMaOQePofQsS5Si6",
              "ctx": null,
              "_testId": "urn:uuid:2e61e12b-acb2-440e-9ea1-087fe46e06ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4839,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/10-rdfc-create.js",
              "parent": "O5GdBT6h82EA31T2okD1t",
              "ctx": null,
              "_testId": "urn:uuid:d317ab9f-729a-43fb-8ee0-d92ee9651b7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5020,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (ecdsa-rdfc-2019 verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:3cf99051-5b58-416c-91cd-e39a3d6e73af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5068,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 201,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:c26f425b-257c-4b27-948a-7fc34e488561",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5269,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 203,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:a16a8a9c-3e2f-4f24-9225-9168323bfff4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5472,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:0108fd0c-8b74-4b3e-9f64-d1432321c9f2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5576,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:fdabea72-6415-453f-8dcd-edad2c863c22",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 184,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:3c90da40-2154-42eb-b293-2ad2bac9d8bd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5870,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:dcfe7920-678a-4886-9174-a34b043afb3b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5974,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 187,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:c9c4375a-227a-41d7-84a3-4d658c218559",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6161,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:c70c08ff-7fdd-4a4a-b5a9-5c1fcfe3581e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6239,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 147,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:f5ac2aad-34db-4299-b7ff-13a19ce116cc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6387,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:435f933c-de52-440a-ab8a-311babc0ec0d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6476,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 194,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:fccea63f-6ff3-4d20-a47a-b797bf1aee5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6670,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:2495b434-8af1-4c50-8f03-7d5ec5842539",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6747,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:9baa58ff-15b8-4f4c-8c7a-b1fa4211755a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6829,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:b4e85fa8-f4c5-4ca7-9127-37d5f448b7ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6904,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5021,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Dy7neS8X79bpAWJVX7NPt",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:eeb48fc5-a436-4461-9cb4-1977591d8094"
        },
        {
          "title": "Digital Bazaar: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:c6b652d2-f825-4e41-9481-b4dfa223c0e7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6982,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 336,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:b3a9b786-9cf2-4611-bb6b-27d04e3d0c3b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7319,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:58984bac-5cd3-4b6c-a01d-5522c9cac42a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:e3ba119f-3e37-45b4-932f-1ef2aeb3ac5a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7525,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:ba0ef249-01ca-4a7d-8ac5-2b3be1022e70",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7621,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:73cb5f1f-6a27-469e-a524-33df2ff33189",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7728,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:636bff16-0cc9-407e-9cf0-aee3520f3760",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7831,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:4e8a4ec4-0cb0-429d-bd60-98a45ff3c49e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7931,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:6e9981f4-4a96-4fcc-a259-73530a3398ff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8027,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:406:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:99f8bac2-eb55-4325-b274-af49028311af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8134,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:a968dd8f-0a78-41fc-85e5-bebabfbe4152",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8247,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:b703ec24-0081-42ae-aaca-58c41596a6be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8357,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:437:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:d8b51773-e3e9-433b-8b06-1eb296c88e14",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8459,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:66a8815c-6191-42c3-b718-540018594752",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:59fd8fcd-2055-49fc-97ef-282a85805509",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8661,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6982,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Dy7neS8X79bpAWJVX7NPt",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:52d58a4d-5df5-49d5-ad9a-9c962c5ed3d4"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:25636a39-e263-459e-b188-34976629b972",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8760,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:363e1391-9115-456d-81bd-84bf245667d9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8848,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:81dbc87e-0150-4f1f-9e60-bd874aeae2c4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8937,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:45a68ca9-e698-4092-96e4-f8cca9d84071",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9024,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:f627a806-1e8a-4bcd-99d9-af7318a15bb0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9112,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:be1df21e-0b6d-4d4c-b746-281211a6ee7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9200,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 332,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:2e898618-ea72-44ce-b021-9a53ef1fed9b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9532,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:f66fc0bb-b94e-4aeb-943a-79f698f28f36",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9620,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:bd368d5a-b74d-48b7-a224-b90cd2e48584",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9708,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:aa18c91d-ec55-475f-9c51-ff41f959c282",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:ad62a69c-f6d6-413a-8e52-9cbf84bf06e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9921,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 85,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:85a278c2-b9bc-4d5b-9ed2-24e73ab315d3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:c0c23693-44e4-4a9c-897a-a91046baf53f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10095,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:a832cae9-7aa3-4779-935a-0eaafd2d5a0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10187,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:c3a44e32-418f-4b04-8c17-c10fe35e2f7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10277,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID: P-256\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8760,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Dy7neS8X79bpAWJVX7NPt",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:d49ba601-f01f-4a0b-82e9-30f59c13b398"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:55fee8b5-c97e-4d71-9c14-bca043527e5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10374,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 652,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:aae0663d-f026-411c-a978-7f5da0c4651f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11027,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:f654405a-c6c0-4ee0-a6db-a0c36d72a63b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11190,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:b307f395-fdef-4f5d-b1a5-38784520c0e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11354,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:eed46b1b-b935-4833-82fc-d04030cadac5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11518,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:800bc31c-423c-4963-b55e-2c3956ffd21c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11681,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:d274f6c7-dc06-435f-94c6-0c76054ed340",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11844,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:8c12f54b-43e1-4b66-a690-56a902132035",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:853d374a-7b68-4dbd-82f1-3ce5d45413ff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12171,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:5739b51e-22b1-4be2-8f01-31d649bca8c6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12334,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:2b2a2b8f-bf23-4499-b6e9-d0b49a2c9c2c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12498,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 165,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:0f74bb2f-4d24-4328-bf14-54a5f699f674",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12663,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:57a3b1b4-1918-4a8a-9cdc-9dcab61b9295",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12827,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:aae7b46f-7e28-4c65-a0ce-b99aa17c2b73",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12991,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:51b5ae87-1727-4339-aeca-6e132c203c74",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13154,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine: P-256\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10374,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Dy7neS8X79bpAWJVX7NPt",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
          "_testId": "urn:uuid:fe14fc9d-b118-4cd5-9dcc-8e1925614113"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "hTD6kIfIUVCBr-jsDUUph",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:4d81d26b-aa5e-48d3-a371-a122b043c745",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "If the \"proof\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:3cf99051-5b58-416c-91cd-e39a3d6e73af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5068,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 201,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:c6b652d2-f825-4e41-9481-b4dfa223c0e7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6982,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 336,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:25636a39-e263-459e-b188-34976629b972",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8760,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:55fee8b5-c97e-4d71-9c14-bca043527e5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10374,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 652,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:c26f425b-257c-4b27-948a-7fc34e488561",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5269,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 203,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:b3a9b786-9cf2-4611-bb6b-27d04e3d0c3b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7319,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:363e1391-9115-456d-81bd-84bf245667d9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8848,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:aae0663d-f026-411c-a978-7f5da0c4651f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11027,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:a16a8a9c-3e2f-4f24-9225-9168323bfff4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5472,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:58984bac-5cd3-4b6c-a01d-5522c9cac42a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:81dbc87e-0150-4f1f-9e60-bd874aeae2c4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8937,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:f654405a-c6c0-4ee0-a6db-a0c36d72a63b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11190,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:0108fd0c-8b74-4b3e-9f64-d1432321c9f2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5576,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:e3ba119f-3e37-45b4-932f-1ef2aeb3ac5a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7525,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:45a68ca9-e698-4092-96e4-f8cca9d84071",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9024,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:b307f395-fdef-4f5d-b1a5-38784520c0e4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11354,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:fdabea72-6415-453f-8dcd-edad2c863c22",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 184,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:ba0ef249-01ca-4a7d-8ac5-2b3be1022e70",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7621,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:f627a806-1e8a-4bcd-99d9-af7318a15bb0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9112,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:eed46b1b-b935-4833-82fc-d04030cadac5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11518,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:3c90da40-2154-42eb-b293-2ad2bac9d8bd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5870,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:73cb5f1f-6a27-469e-a524-33df2ff33189",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7728,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:be1df21e-0b6d-4d4c-b746-281211a6ee7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9200,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 332,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:800bc31c-423c-4963-b55e-2c3956ffd21c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11681,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:dcfe7920-678a-4886-9174-a34b043afb3b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5974,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 187,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:636bff16-0cc9-407e-9cf0-aee3520f3760",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7831,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:2e898618-ea72-44ce-b021-9a53ef1fed9b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9532,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:d274f6c7-dc06-435f-94c6-0c76054ed340",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11844,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:c9c4375a-227a-41d7-84a3-4d658c218559",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6161,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:4e8a4ec4-0cb0-429d-bd60-98a45ff3c49e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7931,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:f66fc0bb-b94e-4aeb-943a-79f698f28f36",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9620,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:8c12f54b-43e1-4b66-a690-56a902132035",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:c70c08ff-7fdd-4a4a-b5a9-5c1fcfe3581e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6239,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 147,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:6e9981f4-4a96-4fcc-a259-73530a3398ff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8027,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:406:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:bd368d5a-b74d-48b7-a224-b90cd2e48584",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9708,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:853d374a-7b68-4dbd-82f1-3ce5d45413ff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12171,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:f5ac2aad-34db-4299-b7ff-13a19ce116cc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6387,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:99f8bac2-eb55-4325-b274-af49028311af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8134,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:aa18c91d-ec55-475f-9c51-ff41f959c282",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9812,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:5739b51e-22b1-4be2-8f01-31d649bca8c6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12334,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:435f933c-de52-440a-ab8a-311babc0ec0d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6476,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 194,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:a968dd8f-0a78-41fc-85e5-bebabfbe4152",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8247,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:ad62a69c-f6d6-413a-8e52-9cbf84bf06e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9921,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 85,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:2b2a2b8f-bf23-4499-b6e9-d0b49a2c9c2c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12498,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 165,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.created\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:fccea63f-6ff3-4d20-a47a-b797bf1aee5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6670,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:b703ec24-0081-42ae-aaca-58c41596a6be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8357,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:437:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:85a278c2-b9bc-4d5b-9ed2-24e73ab315d3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:0f74bb2f-4d24-4328-bf14-54a5f699f674",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12663,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:2495b434-8af1-4c50-8f03-7d5ec5842539",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6747,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:d8b51773-e3e9-433b-8b06-1eb296c88e14",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8459,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:c0c23693-44e4-4a9c-897a-a91046baf53f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10095,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:57a3b1b4-1918-4a8a-9cdc-9dcab61b9295",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12827,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:9baa58ff-15b8-4f4c-8c7a-b1fa4211755a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6829,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:66a8815c-6191-42c3-b718-540018594752",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8565,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:a832cae9-7aa3-4779-935a-0eaafd2d5a0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10187,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:aae7b46f-7e28-4c65-a0ce-b99aa17c2b73",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12991,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "ILa295leuMnzSIiYlCibQ",
              "ctx": null,
              "_testId": "urn:uuid:b4e85fa8-f4c5-4ca7-9127-37d5f448b7ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6904,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "129UoTPj2Mhz-YoXF43Ly",
              "ctx": null,
              "_testId": "urn:uuid:59fd8fcd-2055-49fc-97ef-282a85805509",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8661,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "P8Mnc0DyMxZF4UOPS6fhO",
              "ctx": null,
              "_testId": "urn:uuid:c3a44e32-418f-4b04-8c17-c10fe35e2f7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10277,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/15-rdfc-di-verify.js",
              "parent": "I1maby8DeIHLP2bqmVJ6C",
              "ctx": null,
              "_testId": "urn:uuid:51b5ae87-1727-4339-aeca-6e132c203c74",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13154,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of credentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "uBZXV9lpC_vb9U5gfCAeq",
              "ctx": null,
              "_testId": "urn:uuid:3fb74216-f01e-44f8-a78c-cfc6ddf28d2f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13969,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1942,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js:79:17)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of credentials) {\n              credential.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({credential, verifier});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "uBZXV9lpC_vb9U5gfCAeq",
              "ctx": null,
              "_testId": "urn:uuid:29ccb416-68fd-46dc-8970-4099677d508f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16210,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 866,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n            // use each issuer to create test data for verify suite\n            for(const issuer of issuers) {\n              const {\n                supportedEcdsaKeyTypes: issuerSupportedEcdsaKeyTypes\n              } = issuer.settings;\n              // issue vc for each supported key type\n              for(const verifierSupportedEcdsaKeyType of\n                verifierSupportedEcdsaKeyTypes) {\n                if(issuerSupportedEcdsaKeyTypes.includes(\n                  verifierSupportedEcdsaKeyType)) {\n                  // add each vc to resulting test data\n                  const issuedVc = await createInitialVc({\n                    issuer,\n                    vc: vcTestData.verify.document\n                  });\n                  credentials.push(issuedVc);\n                }\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "uBZXV9lpC_vb9U5gfCAeq",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15911,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 299,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fpe98YUdurVdPy3_9Zpbi",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:11b6debd-0b38-4e08-9a02-af52fdad915a"
        },
        {
          "title": "Digital Bazaar: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of credentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ccetH5SDzh3ZuHJqmazUJ",
              "ctx": null,
              "_testId": "urn:uuid:f33b2d72-fb64-4345-bf53-3e074f9f9902",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17380,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 469,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of credentials) {\n              credential.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({credential, verifier});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ccetH5SDzh3ZuHJqmazUJ",
              "ctx": null,
              "_testId": "urn:uuid:6b61933c-8bed-421d-9e18-2c3236e21ed8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18135,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 430,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar: P-256, P-384\"",
              "body": "async function() {\n            // use each issuer to create test data for verify suite\n            for(const issuer of issuers) {\n              const {\n                supportedEcdsaKeyTypes: issuerSupportedEcdsaKeyTypes\n              } = issuer.settings;\n              // issue vc for each supported key type\n              for(const verifierSupportedEcdsaKeyType of\n                verifierSupportedEcdsaKeyTypes) {\n                if(issuerSupportedEcdsaKeyTypes.includes(\n                  verifierSupportedEcdsaKeyType)) {\n                  // add each vc to resulting test data\n                  const issuedVc = await createInitialVc({\n                    issuer,\n                    vc: vcTestData.verify.document\n                  });\n                  credentials.push(issuedVc);\n                }\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ccetH5SDzh3ZuHJqmazUJ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17849,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 287,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fpe98YUdurVdPy3_9Zpbi",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:1ef4d113-790d-467e-9c8d-1a4314616a65"
        },
        {
          "title": "SpruceID: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of credentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "1T0tVYl1FDPfW633T8GnB",
              "ctx": null,
              "_testId": "urn:uuid:55261fa4-cca6-4f10-926e-27eb02700187",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18804,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 334,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js:79:17)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of credentials) {\n              credential.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({credential, verifier});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "1T0tVYl1FDPfW633T8GnB",
              "ctx": null,
              "_testId": "urn:uuid:10f792ab-85b7-4a52-bc68-ad1f228f3f75",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19373,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 612,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID: P-256\"",
              "body": "async function() {\n            // use each issuer to create test data for verify suite\n            for(const issuer of issuers) {\n              const {\n                supportedEcdsaKeyTypes: issuerSupportedEcdsaKeyTypes\n              } = issuer.settings;\n              // issue vc for each supported key type\n              for(const verifierSupportedEcdsaKeyType of\n                verifierSupportedEcdsaKeyTypes) {\n                if(issuerSupportedEcdsaKeyTypes.includes(\n                  verifierSupportedEcdsaKeyType)) {\n                  // add each vc to resulting test data\n                  const issuedVc = await createInitialVc({\n                    issuer,\n                    vc: vcTestData.verify.document\n                  });\n                  credentials.push(issuedVc);\n                }\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "1T0tVYl1FDPfW633T8GnB",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19139,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 234,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fpe98YUdurVdPy3_9Zpbi",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:f9b73c89-6f64-4419-8a07-790db4b8a853"
        },
        {
          "title": "bovine: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of credentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "r0Fco5lcUs-CtPFcAylan",
              "ctx": null,
              "_testId": "urn:uuid:5887f72c-a2c5-4e24-8b86-8a16137c3ff1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20128,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 655,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of credentials) {\n              credential.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({credential, verifier});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "r0Fco5lcUs-CtPFcAylan",
              "ctx": null,
              "_testId": "urn:uuid:e2090c3e-d03c-4236-9dd8-39ab9b9bdc13",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20924,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 817,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine: P-256\"",
              "body": "async function() {\n            // use each issuer to create test data for verify suite\n            for(const issuer of issuers) {\n              const {\n                supportedEcdsaKeyTypes: issuerSupportedEcdsaKeyTypes\n              } = issuer.settings;\n              // issue vc for each supported key type\n              for(const verifierSupportedEcdsaKeyType of\n                verifierSupportedEcdsaKeyTypes) {\n                if(issuerSupportedEcdsaKeyTypes.includes(\n                  verifierSupportedEcdsaKeyType)) {\n                  // add each vc to resulting test data\n                  const issuedVc = await createInitialVc({\n                    issuer,\n                    vc: vcTestData.verify.document\n                  });\n                  credentials.push(issuedVc);\n                }\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "r0Fco5lcUs-CtPFcAylan",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 141,
              "_error": null
            }
          ],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fpe98YUdurVdPy3_9Zpbi",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:87c59807-9869-48e0-b064-4e2c6a04a618"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (verifiers)\"",
          "body": "async function() {\n      const {match} = endpoints.filterByTag({\n        tags: [...tags],\n        property: 'issuers'\n      });\n      // Uses 'Digital Bazaar' as default issuer to issue a verifiable\n      // credential for the verifier tests.\n      issuers = match.get(issuerName).endpoints;\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "fpe98YUdurVdPy3_9Zpbi",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 13319,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 0,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "DBvJxVppGh-xtdPocXvj2",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:121afafc-73ff-4599-8c4a-e8e498a9fe73",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of credentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "uBZXV9lpC_vb9U5gfCAeq",
              "ctx": null,
              "_testId": "urn:uuid:3fb74216-f01e-44f8-a78c-cfc6ddf28d2f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13969,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1942,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js:79:17)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of credentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ccetH5SDzh3ZuHJqmazUJ",
              "ctx": null,
              "_testId": "urn:uuid:f33b2d72-fb64-4345-bf53-3e074f9f9902",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17380,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 469,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of credentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "1T0tVYl1FDPfW633T8GnB",
              "ctx": null,
              "_testId": "urn:uuid:55261fa4-cca6-4f10-926e-27eb02700187",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18804,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 334,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js:79:17)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of credentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "r0Fco5lcUs-CtPFcAylan",
              "ctx": null,
              "_testId": "urn:uuid:5887f72c-a2c5-4e24-8b86-8a16137c3ff1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-rdfc-2019 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20128,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 655,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of credentials) {\n              credential.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({credential, verifier});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "uBZXV9lpC_vb9U5gfCAeq",
              "ctx": null,
              "_testId": "urn:uuid:29ccb416-68fd-46dc-8970-4099677d508f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com: P-256, P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16210,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 866,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of credentials) {\n              credential.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({credential, verifier});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ccetH5SDzh3ZuHJqmazUJ",
              "ctx": null,
              "_testId": "urn:uuid:6b61933c-8bed-421d-9e18-2c3236e21ed8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18135,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 430,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of credentials) {\n              credential.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({credential, verifier});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "1T0tVYl1FDPfW633T8GnB",
              "ctx": null,
              "_testId": "urn:uuid:10f792ab-85b7-4a52-bc68-ad1f228f3f75",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19373,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 612,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of credentials) {\n              credential.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({credential, verifier});\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "r0Fco5lcUs-CtPFcAylan",
              "ctx": null,
              "_testId": "urn:uuid:e2090c3e-d03c-4236-9dd8-39ab9b9bdc13",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-rdfc-2019\" or \"ecdsa-jcs-2019\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20924,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 817,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-rdfc-2019 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 21742,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 260,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 22002,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 358,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 22360,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 310,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 22671,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 310,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 22981,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 191,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 23172,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 121,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 23293,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 147,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 23440,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 150,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 23590,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 140,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 23730,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 146,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 23876,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 142,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 24018,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 150,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 24168,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 108,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 24276,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 95,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 24371,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 94,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 24465,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 93,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 24558,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 177,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 24735,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 169,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 24904,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 176,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-rdfc-2019 (interop)\"",
          "body": "async function() {\n        issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n        });\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "E-c8-MCzoLeW3KrsfvlSA",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 25080,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 175,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "hTD6kIfIUVCBr-jsDUUph",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:e44c7c01-33ad-48dd-a003-46e77895f44c",
      "columns": [
        "apicatalog.com: P-256, P-384",
        "Digital Bazaar: P-256, P-384",
        "SpruceID: P-256",
        "bovine: P-256"
      ],
      "rows": [
        {
          "id": "apicatalog.com: P-256, P-384",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:96faa835-d316-43b6-986f-0a26a25449e6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256, P-384",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26047,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:f5978a7f-90ef-4683-acca-880c167be649",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256, P-384",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26150,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:b2dcdf93-6b5c-48db-9372-c9847b1a8da4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256, P-384",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25791,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:94:11)"
              }
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"apicatalog.com: P-256, P-384\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:20132750-1de6-47d8-b64c-d8102a79aae5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com: P-256, P-384",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25878,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 169,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Digital Bazaar: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:4184b73d-3958-4a31-b16d-f1ca2bf13bba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26268,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:a72eea76-324a-4bbc-80b6-5c84196d2ae4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26373,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:d210df9f-af24-4dc2-9b62-bf966c167aa2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26486,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:94:11)"
              }
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:646f5c3a-22cf-4b0f-8360-069f5495b95b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26571,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 170,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Digital Bazaar: P-384",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"Digital Bazaar: P-384\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:dff502c1-8c51-4d25-88d1-94c25225cf4f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26741,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 438,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:94:11)"
              }
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Digital Bazaar: P-384\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:d1b491e6-31ed-465e-97b7-46b289f9f600",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "colId": "SpruceID: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "cell": {
                "rowId": "Digital Bazaar: P-384",
                "colId": "bovine: P-256"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            }
          ]
        },
        {
          "id": "SpruceID: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:12f9470b-994f-4f20-93df-14cd18424328",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:f7c80680-2151-44f0-a9ef-40770640cfe4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:5c8ff84e-f3e7-4f38-9a83-4755b7e7b9f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27481,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"SpruceID: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:bb181884-becb-4cc2-9e4f-4d97ad66eb7c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27576,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:94:11)"
              }
            }
          ]
        },
        {
          "id": "bovine: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"apicatalog.com: P-256, P-384\" should verify \"bovine: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:199945d5-0a27-4d5c-ac1b-2a08f9883584",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "apicatalog.com: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27739,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"bovine: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:0982af47-3d9d-4142-af73-1676133f21cc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27846,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"SpruceID: P-256\" should verify \"bovine: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:441d051d-819a-4f9b-86d7-b08b236a09f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "SpruceID: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27965,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 88,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js:94:11)"
              }
            },
            {
              "type": "test",
              "title": "\"bovine: P-256\" should verify \"bovine: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            issuedVc,\n            `Expected issuer ${issuerDisplayName} to issue a VC.`\n          );\n          await verificationSuccess({\n            credential: issuedVc, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "E-c8-MCzoLeW3KrsfvlSA",
              "ctx": null,
              "_testId": "urn:uuid:682fdc16-99c9-42c2-b2cd-ae78de85d1df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine: P-256",
                "columnId": "bovine: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28054,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 174,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (ecdsa-sd-2023 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:86983b79-9526-4bad-9860-55d74b1c537e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:d619d593-31ee-426c-be12-28cb62929040",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:536df51b-5439-4b0f-a1ae-6a3d9bd10f24",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:7f4bcd62-e68c-4020-ad8c-e2f26ba22a1c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:3245d05e-38e3-469d-a224-662b416b60d3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:26fd8e3b-1636-4343-958b-d943636ce1cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:34d03adc-6f1d-4519-8384-cba26a0d12f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:4b50a965-7075-40c1-b96b-18b321d6b20e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:3a23d621-b5f6-45b5-b71b-0b440c0570cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:e84131e9-d9b3-4709-9cb7-2403a88851fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:c58839b1-8908-41e6-8ef1-fe2673dbd339",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"proof.proofValue\" to be multibase-encoded base58-btc value.: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected \"proof.proofValue\" to be multibase-encoded base58-btc value.: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:231:17)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:f1dddaf4-dc74-4bef-9fff-5399a14a2677",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:a25ca97c-7119-4624-929f-922291c89b9c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:0c3998a7-672a-40e4-ba0d-9829802d8b5f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:32a53e23-9a5f-4b55-9254-743b3024f775",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28228,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 417,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "d2Vjnk_jtSYm5nB7bs59B",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
          "_testId": "urn:uuid:d217b41b-af67-41a3-8e47-499bd278504b"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:1558634e-9c3b-42d3-b5fc-85ba78a3c421",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:6af9883c-2082-448b-9518-fea582a26b09",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:19703faa-516b-48a7-9a8e-faec31b6d90d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:574139cc-1c46-48ff-9f89-622d4ee3e2b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:78601689-74b2-4901-90ee-6a7de5847a99",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:29945b88-4263-472b-a8af-c4bb34dc858b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:a8f17fe7-f50a-49ef-8408-d12f267b12c4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:d45dbda5-67ce-4977-bb64-55bcd106da06",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:d69bd32d-bbd6-4812-8f77-e99d36a25c93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:94d87373-5986-4365-a395-d85b5f79fe4e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:8bf58eb2-3b5f-4f16-9b8a-c9fa1a390558",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"proof.proofValue\" to be multibase-encoded base58-btc value.: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected \"proof.proofValue\" to be multibase-encoded base58-btc value.: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:231:17)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:1b01bc31-8e4c-4684-b833-5d01f4480712",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:061d7217-deaa-4f67-9d3a-8d5a134374c1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:85f2cbe2-a4a0-40fc-8e23-d4164a5fcd42",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:44d3f845-f730-46ed-ba71-ab2255852be7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n      const [issuer] = endpoints;\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      data = await createInitialVc({issuer, vc: validVc});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28648,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 130,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "d2Vjnk_jtSYm5nB7bs59B",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
          "_testId": "urn:uuid:cec94686-5240-429f-a227-a2113cbf3060"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "hTD6kIfIUVCBr-jsDUUph",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:13a10337-6133-4c15-8087-f81c5536b4c7",
      "columns": [
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:86983b79-9526-4bad-9860-55d74b1c537e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      should.exist(data, 'Expected data.');\n      const proof = data.proof;\n      should.exist(proof, 'Expected proof to exist.');\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:1558634e-9c3b-42d3-b5fc-85ba78a3c421",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof\" field MUST exist and MUST be either a single object or an unordered set of objects."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.id\" field exists, it MUST be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:d619d593-31ee-426c-be12-28cb62929040",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.id\" field exists, it MUST be a valid URL.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.id) {\n          let result;\n          let err;\n          try {\n            result = new URL(proof.id);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the \"proof.id\" ' +\n            'to not error.');\n          should.exist(result, 'Expected \"proof.id\" to be a URL.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:6af9883c-2082-448b-9518-fea582a26b09",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.id\" field exists, it MUST be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:536df51b-5439-4b0f-a1ae-6a3d9bd10f24",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST exist and be a string.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:19703faa-516b-48a7-9a8e-faec31b6d90d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:7f4bcd62-e68c-4020-ad8c-e2f26ba22a1c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string',\n          'Expected \"proof.type\" to be a string.'\n        );\n        const hasExpectedType = expectedProofTypes.includes(proof.type);\n        hasExpectedType.should.equal(true);\n\n        if(proof.type === 'DataIntegrityProof') {\n          const expectedContexts = [\n            'https://www.w3.org/ns/credentials/v2',\n            'https://w3id.org/security/data-integrity/v2'\n          ];\n          const hasExpectedContexts = expectedContexts.some(\n            value => data['@context'].includes(value));\n          hasExpectedContexts.should.equal(true);\n        }\n\n        if(proof.type === 'Ed25519Signature2020') {\n          const expectedContext =\n            'https://w3id.org/security/suites/ed25519-2020/v1';\n          const hasExpectedContext =\n            data['@context'].includes(expectedContext);\n          hasExpectedContext.should.equal(true);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:574139cc-1c46-48ff-9f89-622d4ee3e2b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.type\" field MUST be \"DataIntegrityProof\" and the associated document MUST include expected contexts."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.cryptosuite\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:3245d05e-38e3-469d-a224-662b416b60d3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.cryptosuite\" field MUST exist and be a string.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          for(const proof of proofs) {\n            proof.should.have.property('cryptosuite');\n            proof.cryptosuite.should.be.a('string', 'Expected ' +\n              '\"cryptosuite\" property to be a string.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:78601689-74b2-4901-90ee-6a7de5847a99",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.cryptosuite\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:26fd8e3b-1636-4343-958b-d943636ce1cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:29945b88-4263-472b-a8af-c4bb34dc858b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.created\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:34d03adc-6f1d-4519-8384-cba26a0d12f4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:a8f17fe7-f50a-49ef-8408-d12f267b12c4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.expires\" field exists, it MUST be a valid XMLSCHEMA-11 dateTimeStamp value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:4b50a965-7075-40c1-b96b-18b321d6b20e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.verificationMethod\" field MUST exist and be a valid URL.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('verificationMethod');\n          let result;\n          let err;\n          try {\n            result = new URL(proof.verificationMethod);\n          } catch(e) {\n            err = e;\n          }\n          should.not.exist(err, 'Expected URL check of the ' +\n            '\"verificationMethod\" to not error.');\n          should.exist(result, 'Expected \"verificationMethod\" ' +\n            'to be a URL');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:d45dbda5-67ce-4977-bb64-55bcd106da06",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.verificationMethod\" field MUST exist and be a valid URL."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofPurpose\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:3a23d621-b5f6-45b5-b71b-0b440c0570cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofPurpose\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofPurpose');\n          proof.proofPurpose.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:d69bd32d-bbd6-4812-8f77-e99d36a25c93",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofPurpose\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof.proofValue\" field MUST exist and be a string.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:e84131e9-d9b3-4709-9cb7-2403a88851fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof.proofValue\" field MUST exist and be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          proof.should.have.property('proofValue');\n          proof.proofValue.should.be.a('string');\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:94d87373-5986-4365-a395-d85b5f79fe4e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "\"proof.proofValue\" field MUST exist and be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:c58839b1-8908-41e6-8ef1-fe2673dbd339",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"proof.proofValue\" to be multibase-encoded base58-btc value.: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected \"proof.proofValue\" to be multibase-encoded base58-btc value.: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:231:17)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const multibase = 'z';\n      proofs.some(proof => {\n        const value = proof?.proofValue;\n        return value.startsWith(multibase) && shouldBeBs58(value);\n      }).should.equal(\n        true,\n        'Expected \"proof.proofValue\" to be multibase-encoded ' +\n          'base58-btc value.'\n      );\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:8bf58eb2-3b5f-4f16-9b8a-c9fa1a390558",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof.proofValue\" field MUST be a multibase-encoded base58-btc encoded value."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"proof.proofValue\" to be multibase-encoded base58-btc value.: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected \"proof.proofValue\" to be multibase-encoded base58-btc value.: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:231:17)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        },
        {
          "id": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:f1dddaf4-dc74-4bef-9fff-5399a14a2677",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings.",
              "body": "function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:1b01bc31-8e4c-4684-b833-5d01f4480712",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.domain\" field exists, it MUST be either a string, or an unordered set of strings."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.challenge\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:a25ca97c-7119-4624-929f-922291c89b9c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.challenge\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.challenge) {\n            // domain must be specified\n            should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n              'to be specified.');\n            proof.challenge.should.be.a('string', 'Expected ' +\n              '\"proof.challenge\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:061d7217-deaa-4f67-9d3a-8d5a134374c1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.challenge\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:0c3998a7-672a-40e4-ba0d-9829802d8b5f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:85f2cbe2-a4a0-40fc-8e23-d4164a5fcd42",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "B5f76xJeVuAEQNKg-xlev",
              "ctx": null,
              "_testId": "urn:uuid:32a53e23-9a5f-4b55-9254-743b3024f775",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/35-sd-di-create.js",
              "parent": "yLnCe1hsOnDeblHJ0TUM1",
              "ctx": null,
              "_testId": "urn:uuid:44d3f845-f730-46ed-ba71-ab2255852be7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              proofs.some(\n                proof => proof.cryptosuite === 'ecdsa-sd-2023'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "gvB6S-O7_K7anEbOkJl_P",
              "ctx": null,
              "_testId": "urn:uuid:c3c3233f-178c-4cfe-9e94-fd89589cebdc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              proofs.some(\n                proof => proof.proofValue.startsWith('u')\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"proofValue\" property that starts with \"u\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "gvB6S-O7_K7anEbOkJl_P",
              "ctx": null,
              "_testId": "urn:uuid:a6a1dcca-55dd-4f25-81ac-f9645d538f8e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "gvB6S-O7_K7anEbOkJl_P",
              "ctx": null,
              "_testId": "urn:uuid:42ae01bb-1b2c-4699-b084-f7004ca94b43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29179,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "gvB6S-O7_K7anEbOkJl_P",
              "ctx": null,
              "_testId": "urn:uuid:be78aebb-6925-42a6-aa9d-23758fcc02d5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29179,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "gvB6S-O7_K7anEbOkJl_P",
              "ctx": null,
              "_testId": "urn:uuid:293af906-e8c4-45ad-9225-088e1daca2c2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "gvB6S-O7_K7anEbOkJl_P",
              "ctx": null,
              "_testId": "urn:uuid:0d681252-410b-407d-955c-482f5ca1898a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29181,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256\"",
              "body": "async function() {\n              issuedVc = await createInitialVc({\n                issuer,\n                vc: credentials.create.document\n                //mandatoryPointers: credentials.create.mandatoryPointers\n              });\n              // Support multiple proofs\n              proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                [issuedVc?.proof];\n              const verificationMethods = proofs.map(\n                proof => proof.verificationMethod);\n              for(const verificationMethod of verificationMethods) {\n                const verificationMethodDocument = await documentLoader({\n                  url: verificationMethod\n                });\n                verificationMethodDocuments.push(verificationMethodDocument);\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "gvB6S-O7_K7anEbOkJl_P",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28781,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 397,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "qAAWx0UFktyvWUbNTu8uh",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:1da021e9-3004-4c4f-92ab-ea9ee5c4020b"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              proofs.some(\n                proof => proof.cryptosuite === 'ecdsa-sd-2023'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qSA2zhGr3kjDN6kn3zXjK",
              "ctx": null,
              "_testId": "urn:uuid:999a125f-7d67-486e-aa1e-50292e95c4cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              proofs.some(\n                proof => proof.proofValue.startsWith('u')\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"proofValue\" property that starts with \"u\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qSA2zhGr3kjDN6kn3zXjK",
              "ctx": null,
              "_testId": "urn:uuid:c4ef9936-c99b-4cb8-bd80-e6c43ca40a9a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qSA2zhGr3kjDN6kn3zXjK",
              "ctx": null,
              "_testId": "urn:uuid:b363c089-5deb-45e1-940c-f8aa71b0a47c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29216,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qSA2zhGr3kjDN6kn3zXjK",
              "ctx": null,
              "_testId": "urn:uuid:696ff45f-9a13-4c7c-9857-765838b9980c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29217,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qSA2zhGr3kjDN6kn3zXjK",
              "ctx": null,
              "_testId": "urn:uuid:ee02a2a9-a98f-4c4b-b06f-6aa8b5b38923",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29218,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qSA2zhGr3kjDN6kn3zXjK",
              "ctx": null,
              "_testId": "urn:uuid:2dac1405-b26b-4a9c-9f31-4679f13273e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29218,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n              issuedVc = await createInitialVc({\n                issuer,\n                vc: credentials.create.document\n                //mandatoryPointers: credentials.create.mandatoryPointers\n              });\n              // Support multiple proofs\n              proofs = Array.isArray(issuedVc?.proof) ? issuedVc.proof :\n                [issuedVc?.proof];\n              const verificationMethods = proofs.map(\n                proof => proof.verificationMethod);\n              for(const verificationMethod of verificationMethods) {\n                const verificationMethodDocument = await documentLoader({\n                  url: verificationMethod\n                });\n                verificationMethodDocuments.push(verificationMethodDocument);\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "qSA2zhGr3kjDN6kn3zXjK",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29181,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "qAAWx0UFktyvWUbNTu8uh",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
          "_testId": "urn:uuid:b7e815c1-8fb7-4700-ad79-1a2f3fe99799"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "kyAKabTeWAw8Q5xNzm2ay",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:807b9a5e-0528-4e31-a455-54eb92237f84",
      "columns": [
        "Digital Bazaar: P-256",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              proofs.some(\n                proof => proof.cryptosuite === 'ecdsa-sd-2023'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "gvB6S-O7_K7anEbOkJl_P",
              "ctx": null,
              "_testId": "urn:uuid:c3c3233f-178c-4cfe-9e94-fd89589cebdc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              proofs.some(\n                proof => proof.cryptosuite === 'ecdsa-sd-2023'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"cryptosuite\" property \"ecdsa-sd-2023\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qSA2zhGr3kjDN6kn3zXjK",
              "ctx": null,
              "_testId": "urn:uuid:999a125f-7d67-486e-aa1e-50292e95c4cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"cryptosuite\" MUST be \"ecdsa-sd-2023\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The field \"proofValue\" MUST start with \"u\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              proofs.some(\n                proof => proof.proofValue.startsWith('u')\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"proofValue\" property that starts with \"u\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "gvB6S-O7_K7anEbOkJl_P",
              "ctx": null,
              "_testId": "urn:uuid:a6a1dcca-55dd-4f25-81ac-f9645d538f8e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"proofValue\" MUST start with \"u\".",
              "body": "function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              proofs.some(\n                proof => proof.proofValue.startsWith('u')\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"proofValue\" property that starts with \"u\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qSA2zhGr3kjDN6kn3zXjK",
              "ctx": null,
              "_testId": "urn:uuid:c4ef9936-c99b-4cb8-bd80-e6c43ca40a9a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The field \"proofValue\" MUST start with \"u\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "gvB6S-O7_K7anEbOkJl_P",
              "ctx": null,
              "_testId": "urn:uuid:42ae01bb-1b2c-4699-b084-f7004ca94b43",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29179,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n                this.test.cell = {\n                  columnId: `${name}: ${keyType}`, rowId: this.test.title\n                };\n                should.exist(verifier, 'Expected implementation to have a VC ' +\n                  'HTTP API compatible verifier.');\n                verificationSuccess({credential: issuedVc, verifier});\n              }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qSA2zhGr3kjDN6kn3zXjK",
              "ctx": null,
              "_testId": "urn:uuid:b363c089-5deb-45e1-940c-f8aa71b0a47c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29216,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "gvB6S-O7_K7anEbOkJl_P",
              "ctx": null,
              "_testId": "urn:uuid:be78aebb-6925-42a6-aa9d-23758fcc02d5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29179,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n              const controllerDocuments = [];\n              for(\n                const verificationMethodDocument of verificationMethodDocuments\n              ) {\n                const controllerDocument = await documentLoader({\n                  url: verificationMethodDocument.controller\n                });\n                controllerDocuments.push(controllerDocument);\n              }\n              proofs.some(\n                proof => controllerDocuments.some(controllerDocument =>\n                  controllerDocument.hasOwnProperty(proof.proofPurpose))\n              ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n                'to match the verification method controller.'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qSA2zhGr3kjDN6kn3zXjK",
              "ctx": null,
              "_testId": "urn:uuid:696ff45f-9a13-4c7c-9857-765838b9980c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29217,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "gvB6S-O7_K7anEbOkJl_P",
              "ctx": null,
              "_testId": "urn:uuid:293af906-e8c4-45ad-9225-088e1daca2c2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29180,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                'at least one \"verificationMethodDocument\".');\n              verificationMethodDocuments.some(\n                verificationMethodDocument =>\n                  verificationMethodDocument?.type === 'Multikey'\n              ).should.equal(true, 'Expected at least one proof to have ' +\n                '\"type\" property value \"Multikey\".'\n              );\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qSA2zhGr3kjDN6kn3zXjK",
              "ctx": null,
              "_testId": "urn:uuid:ee02a2a9-a98f-4c4b-b06f-6aa8b5b38923",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "Dereferencing \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29218,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
          "cells": [
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "gvB6S-O7_K7anEbOkJl_P",
              "ctx": null,
              "_testId": "urn:uuid:0d681252-410b-407d-955c-482f5ca1898a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29181,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyType}`, rowId: this.test.title\n              };\n              verificationMethodDocuments.should.not.eql([], 'Expected ' +\n                '\"verificationMethodDocuments\" to not be empty.');\n              verificationMethodDocuments.some(\n                verificationMethodDocument => {\n                  const multibase = 'z';\n                  const {publicKeyMultibase} = verificationMethodDocument;\n                  return publicKeyMultibase.startsWith(multibase) &&\n                    shouldBeBs58(publicKeyMultibase) &&\n                    shouldBeMulticodecEncoded(publicKeyMultibase);\n                }\n              ).should.equal(true, 'Expected at \"publicKeyMultibase\" to ' +\n                'be MULTIBASE formatted and MULTICODEC encoded.');\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/40-sd-create.js",
              "parent": "qSA2zhGr3kjDN6kn3zXjK",
              "ctx": null,
              "_testId": "urn:uuid:2dac1405-b26b-4a9c-9f31-4679f13273e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "The \"publicKeyMultibase\" property of the verification method MUST be public key encoded according to MULTICODEC and formatted according to MULTIBASE."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29218,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (ecdsa-sd-2023 verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:771d1c7d-5f11-4d80-ac5b-d6fc8c1214bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:65fbc4e5-5874-45fc-bb7e-0ba45b2f6e18",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29316,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:4189c8a4-f92f-4487-9214-d1b4dfc9f266",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29413,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:06d174d9-1917-42df-9fa6-7b75f1007521",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29527,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:47be44b2-7f0d-4be8-bc2f-8ed96aad6ccb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29630,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:4ef0e330-5841-41cc-aec5-e2d5a44a749e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29737,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:1c5ac4d3-0372-477f-a8ef-2a4ad689d8af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29857,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:6d633d4b-ce31-402b-9596-c4c3d281146b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29966,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:af93b0b6-fefe-4502-bbdf-c489fa0cca71",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30063,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:406:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:30bbc5d1-1ed1-48cb-9860-f6e17fe628ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30169,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:af5371d6-7741-41ba-b4ab-eb29af06c2cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30277,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:bffafd2e-a503-401e-8839-38f1cf079c68",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30383,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:437:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:199c00de-b4d9-4f13-a179-3cccead3a3a6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30490,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:697efd3b-a4e4-4314-a4fc-53c7b8ff82fd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30592,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:89c75f0f-6cf6-469b-9884-b5ea6c33832d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256, P-384\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "T9lIalqqulYahwOUC8beV",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:f12dd620-78c1-4096-8e86-d928c602b9f2"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:589a0d4e-0804-4ec6-86bf-4ae62e64f34c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 7,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:cb3d60e7-8743-4a0b-8619-3fad2a440711",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30793,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:8f916ac7-5ddb-4fd6-ab3a-3e35b88e5d3d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30800,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:421c0871-bbaf-484a-b7d2-924ef762f241",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30806,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 7,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:72abe6e5-2459-4372-a8bd-0269d49a9eeb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:3ff9351b-8274-4320-a9aa-43eb1f3614a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30819,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:bfa923a6-5c43-403d-ae9d-5d57cd08afeb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30825,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 7,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:291bade2-aa2d-46b8-9c35-ef9811ed0a08",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30832,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:ea28972c-a349-4c18-924e-88dddac50763",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30851,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 8,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:7090b8ea-5054-4e76-bd6d-d84fb297658a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30859,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:860b0eb3-c353-4584-a0cc-0380aef49709",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30865,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:333265cf-dd29-4721-9c8e-9886557b019f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30871,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:e2bdf201-360c-4704-9e88-31fea74a8efd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30876,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 7,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:72fd779e-9e20-42f2-965b-161108da1230",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30883,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:a254e389-d9f0-4476-968d-4d0555287a78",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30888,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n      credentials = await generateTestData();\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "T9lIalqqulYahwOUC8beV",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
          "_testId": "urn:uuid:93adbda4-b8aa-4c91-828f-08c4b7f6343b"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "hTD6kIfIUVCBr-jsDUUph",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:5ab3affd-c07d-4291-96e7-b92e2b2627e4",
      "columns": [
        "Digital Bazaar: P-256, P-384",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "If the \"proof\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:771d1c7d-5f11-4d80-ac5b-d6fc8c1214bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:589a0d4e-0804-4ec6-86bf-4ae62e64f34c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 7,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:65fbc4e5-5874-45fc-bb7e-0ba45b2f6e18",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29316,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:cb3d60e7-8743-4a0b-8619-3fad2a440711",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30793,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:4189c8a4-f92f-4487-9214-d1b4dfc9f266",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29413,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        this.test.cell = {columnId, rowId: this.test.title};\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:8f916ac7-5ddb-4fd6-ab3a-3e35b88e5d3d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30800,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:06d174d9-1917-42df-9fa6-7b75f1007521",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29527,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:421c0871-bbaf-484a-b7d2-924ef762f241",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30806,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 7,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:47be44b2-7f0d-4be8-bc2f-8ed96aad6ccb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29630,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:72abe6e5-2459-4372-a8bd-0269d49a9eeb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:4ef0e330-5841-41cc-aec5-e2d5a44a749e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29737,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:3ff9351b-8274-4320-a9aa-43eb1f3614a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30819,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:1c5ac4d3-0372-477f-a8ef-2a4ad689d8af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29857,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:bfa923a6-5c43-403d-ae9d-5d57cd08afeb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30825,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 7,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:6d633d4b-ce31-402b-9596-c4c3d281146b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29966,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:291bade2-aa2d-46b8-9c35-ef9811ed0a08",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30832,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:af93b0b6-fefe-4502-bbdf-c489fa0cca71",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30063,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:406:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      await verificationFail({\n        credential, verifier, options: {\n          // this will fail since the vc generated is created with the\n          // assertionMethod proof purpose.\n          expectedProofPurpose: 'authentication'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:ea28972c-a349-4c18-924e-88dddac50763",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofPurpose\" value does not match \"options.expectedProofPurpose\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30851,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 8,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:30bbc5d1-1ed1-48cb-9860-f6e17fe628ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30169,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // proofValue is added after signing so we can\n      // safely delete it for this test\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof.proofValue;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:7090b8ea-5054-4e76-bd6d-d84fb297658a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is missing, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30859,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:af5371d6-7741-41ba-b4ab-eb29af06c2cb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30277,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // null should be an invalid proofValue for almost any proof\n      const credential = credentials.clone('issuedVc');\n      credential.proof.proofValue = null;\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:860b0eb3-c353-4584-a0cc-0380aef49709",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30865,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.created\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:bffafd2e-a503-401e-8839-38f1cf079c68",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30383,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response{ data: { …(3) }, …(3) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/helpers.js:52:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/node_modules/data-integrity-test-suite-assertion/index.js:437:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.created\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      // FIXME: Fix test to check if a cryptographic suite requires the\n      // “proof.created” value\n      const credential = credentials.clone('invalidCreated');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:333265cf-dd29-4721-9c8e-9886557b019f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.created\" field is invalid, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30871,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:199c00de-b4d9-4f13-a179-3cccead3a3a6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30490,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('issuedVc');\n      // remove the initial z\n      credential.proof.proofValue = credential.proof.proofValue.slice(1);\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:e2bdf201-360c-4704-9e88-31fea74a8efd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proof.proofValue\" field is not a multibase-encoded base58-btc value, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30876,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 7,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:697efd3b-a4e4-4314-a4fc-53c7b8ff82fd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30592,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidDomain');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:72fd779e-9e20-42f2-965b-161108da1230",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.domain\" is set and it does not match \"proof.domain\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30883,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "woJn5zn5oPl1635QrKCIs",
              "ctx": null,
              "_testId": "urn:uuid:89c75f0f-6cf6-469b-9884-b5ea6c33832d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised.",
              "body": "async function() {\n      this.test.cell = {columnId, rowId: this.test.title};\n      const credential = credentials.clone('invalidChallenge');\n      await verificationFail({\n        credential, verifier, options: {\n          domain: 'domain.example',\n          challenge: '1235abcd6789'\n        }\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/45-sd-di-verify.js",
              "parent": "KsSo8leQhuEQ-IOGqw7R_",
              "ctx": null,
              "_testId": "urn:uuid:a254e389-d9f0-4476-968d-4d0555287a78",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"options.challenge\" is set and it does not match \"proof.challenge\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30888,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "Digital Bazaar: P-256, P-384",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:712c6658-89ad-4723-9d0c-f97c974514ff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of nestedDisclosedCredentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:09e57f8a-56f1-4f6c-98de-68aff02527f3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32895,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedDlCredentialNoIds) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:ee5b0591-8d63-4de5-a94e-c537e943d10b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33014,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentialsWithFullArray) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:eb44293d-df7f-431b-a800-a35c27c69732",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST verify with full array revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33116,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 153,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(\n                const credential of disclosedCredentialsWithLessThanFullSubArray\n              ) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:e0a0e6e6-b358-47aa-a372-104f2efee1d7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33269,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(\n                const credential of disclosedCredentialsWithoutFirstArrayElement\n              ) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:1221d373-a15b-47fc-9206-45bb14f4c3de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 145,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of disclosedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              // intentionally modify proofValue to not start with 'u'\n              signedCredentialCopy.proof.proofValue = 'a';\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:8a5b893d-82e7-4e65-9cc7-10444b99c42a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33534,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of disclosedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              signedCredentialCopy.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:d2a5dffd-3291-4a6f-b8d0-48b1dae5fbfb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of signedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:0551cf5b-4247-4188-a195-60984fd35c8b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST fail to verify a base proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33733,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentials) {\n                const signedCredentialCopy = klona(credential);\n                // intentionally modify `credentialSubject` ID\n                signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n                await verificationFail({\n                  credential: signedCredentialCopy, verifier\n                });\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:67c489e8-5d89-4492-9d41-e1863f8f5b32",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 125,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar: P-256, P-384\"",
              "body": "async function() {\n            for(const issuer of issuers) {\n              const {\n                supportedEcdsaKeyTypes: issuerSupportedEcdsaKeyTypes\n              } = issuer.settings;\n              for(const verifierSupportedEcdsaKeyType of\n                verifierSupportedEcdsaKeyTypes) {\n                if(issuerSupportedEcdsaKeyTypes.includes(\n                  verifierSupportedEcdsaKeyType)) {\n                  const nestedCredential = klona(\n                    credentials.verify.subjectNestedObjects);\n                  // create initial signed VC\n                  const signedVc = await createInitialVc({\n                    issuer,\n                    vc: nestedCredential.document,\n                    // mandatoryPointers: nestedCredential.mandatoryPointers\n                  });\n                  signedCredentials.push(signedVc);\n                  // use initial VC for a basic selective disclosure test\n                  const {disclosedCredential} = await createDisclosedVc({\n                    selectivePointers: ['/credentialSubject/id'],\n                    signedCredential: signedVc,\n                    vcHolder\n                  });\n                  disclosedCredentials.push(disclosedCredential);\n                  const nestedPointers = nestedCredential.\n                    selectivePointers.slice(1, 3);\n                  // create initial nestedDisclosedCredential from signedVc\n                  const {\n                    disclosedCredential: nestedDisclosedCredential\n                  } = await createDisclosedVc({\n                    selectivePointers: [...nestedPointers],\n                    signedCredential: signedVc,\n                    vcHolder\n                  });\n                  nestedDisclosedCredentials.push(nestedDisclosedCredential);\n                  // copy the first vc\n                  const noIdVc = klona(nestedCredential.document);\n                  // delete the id\n                  delete noIdVc.id;\n                  // start second round test data creation w/ dlCredentialNoIds\n                  const signedDlCredentialNoIds = await createInitialVc({\n                    issuer, vc: noIdVc\n                  });\n                  const {\n                    disclosedCredential: disclosedDlCredentialNoId\n                  } = await createDisclosedVc({\n                    selectivePointers: [...nestedPointers],\n                    signedCredential: signedDlCredentialNoIds,\n                    vcHolder\n                  });\n                  disclosedDlCredentialNoIds.push(disclosedDlCredentialNoId);\n                  const credentialHasArrays = klona(\n                    credentials.verify.subjectHasArrays);\n                  // start third round test data creation w/\n                  // AchievementCredential\n                  const signedAchievementCredential = await createInitialVc({\n                    issuer, vc: credentialHasArrays.document\n                  });\n\n                  // select full arrays\n                  const {\n                    disclosedCredential: revealedAchievementCredential1\n                  } = await createDisclosedVc({\n                    selectivePointers:\n                      [...credentialHasArrays.selectivePointers],\n                    signedCredential: signedAchievementCredential,\n                    vcHolder\n                  });\n                  disclosedCredentialsWithFullArray.push(\n                    revealedAchievementCredential1);\n                  // select less than full subarrays\n                  const lessThanFullPointers = credentialHasArrays.\n                    selectivePointers.slice(2, -4);\n                  const {\n                    disclosedCredential: revealedAchievementCredential2\n                  } = await createDisclosedVc({\n                    selectivePointers: lessThanFullPointers,\n                    signedCredential: signedAchievementCredential,\n                    vcHolder\n                  });\n                  disclosedCredentialsWithLessThanFullSubArray.push(\n                    revealedAchievementCredential2);\n                  // select w/o first 7 array element\n                  const removeFirst7Pointers = credentialHasArrays.\n                    selectivePointers.slice(7);\n                  const {\n                    disclosedCredential: revealedAchievementCredential3\n                  } = await createDisclosedVc({\n                    selectivePointers: removeFirst7Pointers,\n                    signedCredential: signedAchievementCredential,\n                    vcHolder\n                  });\n                  disclosedCredentialsWithoutFirstArrayElement.push(\n                    revealedAchievementCredential3);\n                }\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1894,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ZfzHU1XbkN-1iwI6WiZgV",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:7587484f-4dd0-4877-8e79-9bf476e06053"
        },
        {
          "title": "Grotto Networking: P-256",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:53319933-312e-4d21-9a4d-6d5698f70145",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35133,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of nestedDisclosedCredentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:e10789e1-9ff3-452d-8ca2-2468c3a156ac",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35167,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedDlCredentialNoIds) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:cd5b1c19-a483-4921-af87-6582bbd694f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35231,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentialsWithFullArray) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:8104d1ba-3a8b-4cf9-a2d1-c4f5d5612418",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35294,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 573,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:201:17)"
              }
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(\n                const credential of disclosedCredentialsWithLessThanFullSubArray\n              ) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:84971043-c04b-453c-a7e3-fc4b0e58700b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35868,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 271,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(\n                const credential of disclosedCredentialsWithoutFirstArrayElement\n              ) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:c06e6314-c618-4aaf-b48e-63ceb422f72f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36139,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 225,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of disclosedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              // intentionally modify proofValue to not start with 'u'\n              signedCredentialCopy.proof.proofValue = 'a';\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:058d8707-f87f-4218-b406-c7c78dcf132d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36364,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of disclosedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              signedCredentialCopy.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:3079e85b-02ba-489d-9e78-543e29c714a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of signedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:52746c59-0627-4663-a0d0-c96efd452946",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36376,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentials) {\n                const signedCredentialCopy = klona(credential);\n                // intentionally modify `credentialSubject` ID\n                signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n                await verificationFail({\n                  credential: signedCredentialCopy, verifier\n                });\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:f412a457-4448-47e9-84b1-783ee268ed12",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36381,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking: P-256\"",
              "body": "async function() {\n            for(const issuer of issuers) {\n              const {\n                supportedEcdsaKeyTypes: issuerSupportedEcdsaKeyTypes\n              } = issuer.settings;\n              for(const verifierSupportedEcdsaKeyType of\n                verifierSupportedEcdsaKeyTypes) {\n                if(issuerSupportedEcdsaKeyTypes.includes(\n                  verifierSupportedEcdsaKeyType)) {\n                  const nestedCredential = klona(\n                    credentials.verify.subjectNestedObjects);\n                  // create initial signed VC\n                  const signedVc = await createInitialVc({\n                    issuer,\n                    vc: nestedCredential.document,\n                    // mandatoryPointers: nestedCredential.mandatoryPointers\n                  });\n                  signedCredentials.push(signedVc);\n                  // use initial VC for a basic selective disclosure test\n                  const {disclosedCredential} = await createDisclosedVc({\n                    selectivePointers: ['/credentialSubject/id'],\n                    signedCredential: signedVc,\n                    vcHolder\n                  });\n                  disclosedCredentials.push(disclosedCredential);\n                  const nestedPointers = nestedCredential.\n                    selectivePointers.slice(1, 3);\n                  // create initial nestedDisclosedCredential from signedVc\n                  const {\n                    disclosedCredential: nestedDisclosedCredential\n                  } = await createDisclosedVc({\n                    selectivePointers: [...nestedPointers],\n                    signedCredential: signedVc,\n                    vcHolder\n                  });\n                  nestedDisclosedCredentials.push(nestedDisclosedCredential);\n                  // copy the first vc\n                  const noIdVc = klona(nestedCredential.document);\n                  // delete the id\n                  delete noIdVc.id;\n                  // start second round test data creation w/ dlCredentialNoIds\n                  const signedDlCredentialNoIds = await createInitialVc({\n                    issuer, vc: noIdVc\n                  });\n                  const {\n                    disclosedCredential: disclosedDlCredentialNoId\n                  } = await createDisclosedVc({\n                    selectivePointers: [...nestedPointers],\n                    signedCredential: signedDlCredentialNoIds,\n                    vcHolder\n                  });\n                  disclosedDlCredentialNoIds.push(disclosedDlCredentialNoId);\n                  const credentialHasArrays = klona(\n                    credentials.verify.subjectHasArrays);\n                  // start third round test data creation w/\n                  // AchievementCredential\n                  const signedAchievementCredential = await createInitialVc({\n                    issuer, vc: credentialHasArrays.document\n                  });\n\n                  // select full arrays\n                  const {\n                    disclosedCredential: revealedAchievementCredential1\n                  } = await createDisclosedVc({\n                    selectivePointers:\n                      [...credentialHasArrays.selectivePointers],\n                    signedCredential: signedAchievementCredential,\n                    vcHolder\n                  });\n                  disclosedCredentialsWithFullArray.push(\n                    revealedAchievementCredential1);\n                  // select less than full subarrays\n                  const lessThanFullPointers = credentialHasArrays.\n                    selectivePointers.slice(2, -4);\n                  const {\n                    disclosedCredential: revealedAchievementCredential2\n                  } = await createDisclosedVc({\n                    selectivePointers: lessThanFullPointers,\n                    signedCredential: signedAchievementCredential,\n                    vcHolder\n                  });\n                  disclosedCredentialsWithLessThanFullSubArray.push(\n                    revealedAchievementCredential2);\n                  // select w/o first 7 array element\n                  const removeFirst7Pointers = credentialHasArrays.\n                    selectivePointers.slice(7);\n                  const {\n                    disclosedCredential: revealedAchievementCredential3\n                  } = await createDisclosedVc({\n                    selectivePointers: removeFirst7Pointers,\n                    signedCredential: signedAchievementCredential,\n                    vcHolder\n                  });\n                  disclosedCredentialsWithoutFirstArrayElement.push(\n                    revealedAchievementCredential3);\n                }\n              }\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33960,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1173,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ZfzHU1XbkN-1iwI6WiZgV",
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "_testId": "urn:uuid:14f4e339-4b77-433b-b1c5-5108c957c2fb"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (verifiers)\"",
          "body": "async function() {\n      const {match: matchingIssuers} = endpoints.filterByTag({\n        tags: [...tags],\n        property: 'issuers'\n      });\n      const {match: matchingVcHolders} = endpoints.filterByTag({\n        tags: [...holderTags],\n        property: 'vcHolders'\n      });\n      // Uses 'Digital Bazaar' as default issuer to issue a verifiable\n      // credential for the verifier tests.\n      issuers = matchingIssuers.get(issuerName).endpoints;\n      const vcHolders = matchingVcHolders.get(holderName).endpoints;\n      vcHolder = vcHolders[0];\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "ZfzHU1XbkN-1iwI6WiZgV",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 30894,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 0,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "sx7DgjFgAU1qJN2zoa35t",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:4ff7b74f-e907-421d-9e1b-49fbdd7005c4",
      "columns": [
        "Digital Bazaar: P-256, P-384",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:712c6658-89ad-4723-9d0c-f97c974514ff",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with an ecdsa-sd-2023 proof.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:53319933-312e-4d21-9a4d-6d5698f70145",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with an ecdsa-sd-2023 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35133,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with nested disclosed properties.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of nestedDisclosedCredentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:09e57f8a-56f1-4f6c-98de-68aff02527f3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32895,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with nested disclosed properties.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of nestedDisclosedCredentials) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:e10789e1-9ff3-452d-8ca2-2468c3a156ac",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with nested disclosed properties."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35167,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST verify a valid VC with disclosed properties and bnodes.",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedDlCredentialNoIds) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:ee5b0591-8d63-4de5-a94e-c537e943d10b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33014,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify a valid VC with disclosed properties and bnodes.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedDlCredentialNoIds) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:cd5b1c19-a483-4921-af87-6582bbd694f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify a valid VC with disclosed properties and bnodes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35231,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "MUST verify with full array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentialsWithFullArray) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:eb44293d-df7f-431b-a800-a35c27c69732",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST verify with full array revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33116,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 153,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with full array revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentialsWithFullArray) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:8104d1ba-3a8b-4cf9-a2d1-c4f5d5612418",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with full array revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35294,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 573,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/assertions.js:81:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js:201:17)"
              }
            }
          ]
        },
        {
          "id": "MUST verify with fewer array revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(\n                const credential of disclosedCredentialsWithLessThanFullSubArray\n              ) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:e0a0e6e6-b358-47aa-a372-104f2efee1d7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33269,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 120,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify with fewer array revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(\n                const credential of disclosedCredentialsWithLessThanFullSubArray\n              ) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:84971043-c04b-453c-a7e3-fc4b0e58700b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify with fewer array revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35868,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 271,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "MUST verify w/o first element revealed properties",
          "cells": [
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(\n                const credential of disclosedCredentialsWithoutFirstArrayElement\n              ) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:1221d373-a15b-47fc-9206-45bb14f4c3de",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 145,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST verify w/o first element revealed properties",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(\n                const credential of disclosedCredentialsWithoutFirstArrayElement\n              ) {\n                await verificationSuccess({credential, verifier});\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:c06e6314-c618-4aaf-b48e-63ceb422f72f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST verify w/o first element revealed properties"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36139,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 225,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of disclosedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              // intentionally modify proofValue to not start with 'u'\n              signedCredentialCopy.proof.proofValue = 'a';\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:8a5b893d-82e7-4e65-9cc7-10444b99c42a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33534,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of disclosedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              // intentionally modify proofValue to not start with 'u'\n              signedCredentialCopy.proof.proofValue = 'a';\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:058d8707-f87f-4218-b406-c7c78dcf132d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"proofValue\" string does not start with \"u\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36364,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of disclosedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              signedCredentialCopy.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:d2a5dffd-3291-4a6f-b8d0-48b1dae5fbfb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of disclosedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              signedCredentialCopy.proof.cryptosuite = 'invalid-cryptosuite';\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:3079e85b-02ba-489d-9e78-543e29c714a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "If the \"cryptosuite\" field is not the string \"ecdsa-sd-2023\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 6,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST fail to verify a base proof.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of signedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:0551cf5b-4247-4188-a195-60984fd35c8b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST fail to verify a base proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33733,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a base proof.",
              "body": "async function() {\n            this.test.cell = {\n              columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n            };\n            for(const credential of signedCredentials) {\n              const signedCredentialCopy = klona(credential);\n              await verificationFail({\n                credential: signedCredentialCopy, verifier\n              });\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:52746c59-0627-4663-a0d0-c96efd452946",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a base proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36376,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "MUST fail to verify a modified disclosed credential.",
          "cells": [
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentials) {\n                const signedCredentialCopy = klona(credential);\n                // intentionally modify `credentialSubject` ID\n                signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n                await verificationFail({\n                  credential: signedCredentialCopy, verifier\n                });\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "FQj1FDAVzT6TPzSUePVh3",
              "ctx": null,
              "_testId": "urn:uuid:67c489e8-5d89-4492-9d41-e1863f8f5b32",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar: P-256, P-384",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 125,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "MUST fail to verify a modified disclosed credential.",
              "body": "async function() {\n              this.test.cell = {\n                columnId: `${name}: ${keyTypes}`, rowId: this.test.title\n              };\n              for(const credential of disclosedCredentials) {\n                const signedCredentialCopy = klona(credential);\n                // intentionally modify `credentialSubject` ID\n                signedCredentialCopy.credentialSubject.id = 'urn:invalid';\n                await verificationFail({\n                  credential: signedCredentialCopy, verifier\n                });\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/50-sd-verify.js",
              "parent": "PCRlVtbaeeNNX4BsRJPU0",
              "ctx": null,
              "_testId": "urn:uuid:f412a457-4448-47e9-84b1-783ee268ed12",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking: P-256",
                "rowId": "MUST fail to verify a modified disclosed credential."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36381,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "ecdsa-sd-2023 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n        const issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n          // mandatoryPointers: credentials.interop.mandatoryPointers\n        });\n        const {match: matchingVcHolders} = endpoints.filterByTag({\n          tags: ['vcHolder'],\n          property: 'vcHolders'\n        });\n        // Uses 'Digital Bazaar' as default VC holder to create disclosed\n        // credentials for the tests.\n        const vcHolders = matchingVcHolders.get(holderName).endpoints;\n        const vcHolder = vcHolders[0];\n        ({disclosedCredential} = await createDisclosedVc({\n          selectivePointers: ['/credentialSubject/id'],\n          signedCredential: issuedVc,\n          vcHolder\n        }));\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "i_MN5CryPK7HJpHDb0vub",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 36409,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 248,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n        const issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n          // mandatoryPointers: credentials.interop.mandatoryPointers\n        });\n        const {match: matchingVcHolders} = endpoints.filterByTag({\n          tags: ['vcHolder'],\n          property: 'vcHolders'\n        });\n        // Uses 'Digital Bazaar' as default VC holder to create disclosed\n        // credentials for the tests.\n        const vcHolders = matchingVcHolders.get(holderName).endpoints;\n        const vcHolder = vcHolders[0];\n        ({disclosedCredential} = await createDisclosedVc({\n          selectivePointers: ['/credentialSubject/id'],\n          signedCredential: issuedVc,\n          vcHolder\n        }));\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "i_MN5CryPK7HJpHDb0vub",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 36657,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 240,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n        const issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n          // mandatoryPointers: credentials.interop.mandatoryPointers\n        });\n        const {match: matchingVcHolders} = endpoints.filterByTag({\n          tags: ['vcHolder'],\n          property: 'vcHolders'\n        });\n        // Uses 'Digital Bazaar' as default VC holder to create disclosed\n        // credentials for the tests.\n        const vcHolders = matchingVcHolders.get(holderName).endpoints;\n        const vcHolder = vcHolders[0];\n        ({disclosedCredential} = await createDisclosedVc({\n          selectivePointers: ['/credentialSubject/id'],\n          signedCredential: issuedVc,\n          vcHolder\n        }));\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "i_MN5CryPK7HJpHDb0vub",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 36896,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 125,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"ecdsa-sd-2023 (interop)\"",
          "body": "async function() {\n        const issuedVc = await createInitialVc({\n          issuer: issuerEndpoint,\n          vc: credentials.interop.document\n          // mandatoryPointers: credentials.interop.mandatoryPointers\n        });\n        const {match: matchingVcHolders} = endpoints.filterByTag({\n          tags: ['vcHolder'],\n          property: 'vcHolders'\n        });\n        // Uses 'Digital Bazaar' as default VC holder to create disclosed\n        // credentials for the tests.\n        const vcHolders = matchingVcHolders.get(holderName).endpoints;\n        const vcHolder = vcHolders[0];\n        ({disclosedCredential} = await createDisclosedVc({\n          selectivePointers: ['/credentialSubject/id'],\n          signedCredential: issuedVc,\n          vcHolder\n        }));\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "i_MN5CryPK7HJpHDb0vub",
          "ctx": null,
          "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 37022,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 117,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "hTD6kIfIUVCBr-jsDUUph",
      "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:9b29444d-d02b-420d-a831-1eb7e9becdef",
      "columns": [
        "Digital Bazaar: P-256, P-384",
        "Grotto Networking: P-256"
      ],
      "rows": [
        {
          "id": "Digital Bazaar: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            disclosedCredential,\n            `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n          );\n          await verificationSuccess({\n            credential: disclosedCredential, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "i_MN5CryPK7HJpHDb0vub",
              "ctx": null,
              "_testId": "urn:uuid:4bf6e6e7-3b29-4bd0-9deb-9a9470e0c6e0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37139,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"Grotto Networking: P-256\" should verify \"Digital Bazaar: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            disclosedCredential,\n            `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n          );\n          await verificationSuccess({\n            credential: disclosedCredential, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "i_MN5CryPK7HJpHDb0vub",
              "ctx": null,
              "_testId": "urn:uuid:1246a005-6ece-4997-8c6c-d54a904e4d87",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar: P-256",
                "columnId": "Grotto Networking: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            }
          ]
        },
        {
          "id": "Grotto Networking: P-256",
          "cells": [
            {
              "type": "test",
              "title": "\"Digital Bazaar: P-256, P-384\" should verify \"Grotto Networking: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            disclosedCredential,\n            `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n          );\n          await verificationSuccess({\n            credential: disclosedCredential, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "i_MN5CryPK7HJpHDb0vub",
              "ctx": null,
              "_testId": "urn:uuid:faeac9f6-dea2-4c0b-a2e3-257bcb4a4c57",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking: P-256",
                "columnId": "Digital Bazaar: P-256, P-384"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37284,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer Grotto Networking: P-256 to issue a disclosed VC.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer Grotto Networking: P-256 to issue a disclosed VC.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js:108:18)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            },
            {
              "type": "test",
              "title": "\"Grotto Networking: P-256\" should verify \"Grotto Networking: P-256\"",
              "body": "async function() {\n          this.test.cell = {\n            rowId: issuerDisplayName,\n            columnId: verifierDisplayName\n          };\n          should.exist(\n            disclosedCredential,\n            `Expected issuer ${issuerDisplayName} to issue a disclosed VC.`\n          );\n          await verificationSuccess({\n            credential: disclosedCredential, verifier: verifierEndpoint\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js",
              "parent": "i_MN5CryPK7HJpHDb0vub",
              "ctx": null,
              "_testId": "urn:uuid:2f915835-e3f9-4ed5-9da8-26329cebaae8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking: P-256",
                "columnId": "Grotto Networking: P-256"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37284,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer Grotto Networking: P-256 to issue a disclosed VC.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer Grotto Networking: P-256 to issue a disclosed VC.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-ecdsa-test-suite/vc-di-ecdsa-test-suite/tests/60-sd-interop.js:108:18)\n    at process.processImmediate (node:internal/timers:478:21)"
              }
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "base",
    "shortName": "vc-di-ecdsa-test-suite",
    "subtitle": "Interoperability test suite for ECDSA Data Integrity cryptosuites.",
    "github": "https://github.com/w3c-ccg/vc-di-ecdsa-test-suite",
    "edDraftURI": "https://w3c-ccg.github.io/vc-di-ecdsa-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "http://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/ "
      }
    ]
  },
  "title": "Data Integrity ecdsa 2019 Interoperability Report 1.0",
  "stats": [
    "Tests passed 286/304 94%",
    "Tests failed 18/304 6%",
    "Failures 18",
    "Tests skipped 0",
    "Total tests 304"
  ]
}